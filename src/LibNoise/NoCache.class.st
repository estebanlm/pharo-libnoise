"
/// Noise module that caches the last output value generated by a source
    /// module.
    ///
    /// If an application passes an input value to the GetValue() method that
    /// differs from the previously passed-in input value, this noise module
    /// instructs the source module to calculate the output value.  This
    /// value, as well as the ( @a x, @a y, @a z ) coordinates of the input
    /// value, are stored (cached) in this noise module.
    ///
    /// If the application passes an input value to the GetValue() method
    /// that is equal to the previously passed-in input value, this noise
    /// module returns the cached output value without having the source
    /// module recalculate the output value.
    ///
    /// If an application passes a new source module to the SetSourceModule()
    /// method, the cache is invalidated.
    ///
    /// Caching a noise module is useful if it is used as a source module for
    /// multiple noise modules.  If a source module is not cached, the source
    /// module will redundantly calculate the same output value once for each
    /// noise module in which it is included.
    ///
    /// This noise module requires one source module.
"
Class {
	#name : 'NoCache',
	#superclass : 'NoModule',
	#category : 'LibNoise-Module',
	#package : 'LibNoise',
	#tag : 'Module'
}

{ #category : 'private' }
NoCache class >> cache_new [
	"/// Constructor."

	self ffiCall: #(no_noise_module_Cache* no_noise_module_Cache_new())
]

{ #category : 'instance creation' }
NoCache class >> new [

	^ (self cache_new) initialize
]

{ #category : 'finalizing' }
NoCache >> dispose [

	self ffiCall: #(void no_noise_module_Cache_dispose(no_noise_module_Cache* self))
]

{ #category : 'public' }
NoCache >> getSourceModuleCount [

	self ffiCall: #(int no_noise_module_Cache_GetSourceModuleCount(no_noise_module_Cache* self))
]

{ #category : 'public' }
NoCache >> getValueX: x y: y z: z [

	self ffiCall: #(double no_noise_module_Cache_GetValue(no_noise_module_Cache* self, double x, double y, double z))
]

{ #category : 'public' }
NoCache >> setSourceModuleIndex: index sourceModule: sourceModule [

	self ffiCall: #(void no_noise_module_Cache_SetSourceModule(no_noise_module_Cache* self, int index, no_noise_module_Module* sourceModule))
]
