"
/// Model that defines the displacement of a line segment.
    ///
    /// This model returns an output value from a noise module given the
    /// one-dimensional coordinate of an input value located on a line
    /// segment, which can be used as displacements.
    ///
    /// This class is useful for creating:
    ///  - roads and rivers
    ///  - disaffected college students
    ///
    /// To generate an output value, pass an input value between 0.0 and 1.0
    /// to the GetValue() method.  0.0 represents the start position of the
    /// line segment and 1.0 represents the end position of the line segment.
"
Class {
	#name : 'NoLine',
	#superclass : 'NoBaseObject',
	#category : 'LibNoise-Model',
	#package : 'LibNoise',
	#tag : 'Model'
}

{ #category : 'private' }
NoLine class >> line_new [
	"/// Constructor."

	self ffiCall: #(no_noise_model_Line* no_noise_model_Line_new_1())
]

{ #category : 'private' }
NoLine class >> line_new: module [
	"/// Constructor
	 ///
	 /// @param module The noise module that is used to generate the output
	 /// values."

	self ffiCall: #(no_noise_model_Line* no_noise_model_Line_new_2(no_noise_module_Module* module))
]

{ #category : 'instance creation' }
NoLine class >> new [

	^ (self line_new) initialize
]

{ #category : 'instance creation' }
NoLine class >> newModule: module [

	^ (self line_new: module) initialize
]

{ #category : 'finalizing' }
NoLine >> dispose [

	self ffiCall: #(void no_noise_model_Line_dispose(no_noise_model_Line* self))
]

{ #category : 'public' }
NoLine >> getAttenuate [
	"/// Returns a flag indicating whether the output value is to be
	 /// attenuated (moved toward 0.0) as the ends of the line segment are
	 /// approached by the input value.
	 ///
	 /// @returns
	 /// - @a true if the value is to be attenuated
	 /// - @a false if not."

	self ffiCall: #(bool no_noise_model_Line_GetAttenuate(no_noise_model_Line* self))
]

{ #category : 'public' }
NoLine >> getModule [
	"/// Returns the noise module that is used to generate the output
	 /// values.
	 ///
	 /// @returns A reference to the noise module.
	 ///
	 /// @pre A noise module was passed to the SetModule() method."

	self ffiCall: #(no_noise_module_Module* no_noise_model_Line_GetModule(no_noise_model_Line* self))
]

{ #category : 'public' }
NoLine >> getValue: p [
	"/// Returns the output value from the noise module given the
	 /// one-dimensional coordinate of the specified input value located
	 /// on the line segment.
	 ///
	 /// @param p The distance along the line segment (ranges from 0.0
	 /// to 1.0)
	 ///
	 /// @returns The output value from the noise module.
	 ///
	 /// @pre A noise module was passed to the SetModule() method.
	 /// @pre The start and end points of the line segment were specified.
	 ///
	 /// The output value is generated by the noise module passed to the
	 /// SetModule() method.  This value may be attenuated (moved toward
	 /// 0.0) as @a p approaches either end of the line segment; this is
	 /// the default behavior.
	 ///
	 /// If the value is not to be attenuated, @a p can safely range
	 /// outside the 0.0 to 1.0 range; the output value will be
	 /// extrapolated along the line that this segment is part of."

	self ffiCall: #(double no_noise_model_Line_GetValue(no_noise_model_Line* self, double p))
]

{ #category : 'public' }
NoLine >> setAttenuate: att [
	"/// Sets a flag indicating that the output value is to be attenuated
	 /// (moved toward 0.0) as the ends of the line segment are approached.
	 ///
	 /// @param att A flag that specifies whether the output value is to be
	 /// attenuated."

	self ffiCall: #(void no_noise_model_Line_SetAttenuate(no_noise_model_Line* self, bool att))
]

{ #category : 'public' }
NoLine >> setEndPointX: x y: y z: z [
	"/// Sets the position ( @a x, @a y, @a z ) of the end of the line
	 /// segment to choose values along.
	 ///
	 /// @param x x coordinate of the end position.
	 /// @param y y coordinate of the end position.
	 /// @param z z coordinate of the end position."

	self ffiCall: #(void no_noise_model_Line_SetEndPoint(no_noise_model_Line* self, double x, double y, double z))
]

{ #category : 'public' }
NoLine >> setModule: module [
	"/// Sets the noise module that is used to generate the output values.
	 ///
	 /// @param module The noise module that is used to generate the output
	 /// values.
	 ///
	 /// This noise module must exist for the lifetime of this object,
	 /// until you pass a new noise module to this method."

	self ffiCall: #(void no_noise_model_Line_SetModule(no_noise_model_Line* self, no_noise_module_Module* module))
]

{ #category : 'public' }
NoLine >> setStartPointX: x y: y z: z [
	"/// Sets the position ( @a x, @a y, @a z ) of the start of the line
	 /// segment to choose values along.
	 ///
	 /// @param x x coordinate of the start position.
	 /// @param y y coordinate of the start position.
	 /// @param z z coordinate of the start position."

	self ffiCall: #(void no_noise_model_Line_SetStartPoint(no_noise_model_Line* self, double x, double y, double z))
]
