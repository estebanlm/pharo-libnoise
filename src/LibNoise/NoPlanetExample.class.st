"
// This program demonstrates how to use the libnoise library to generate
// terrain elevations for a complex planetary surface that has the size of the
// earth.
//
// This program outputs a grid of elevation points in geographic (lat/lon)
// projection.  This program creates six files from this grid:
// - A Terragen terrain (*.ter) file that has its elevation points measured in
//   meters.  This file is generated only if the grid of elevation points has
//   a spatial resolution <= 240 meters.
// - A raw terrain (*.raw) file that has its elevation points measured in
//   meters.  This terrain file contains 16-bit signed big-endian values, in
//   row-major order, ordered south to north.
// - A Windows bitmap file (*.bmp) that is colored according to elevation and
//   lit by an artificial light source.
// - A Windows bitmap file (*.bmp) that is colored according to elevation
//   only.
// - A Windows bitmap file (*.bmp) containing the normals of the terrain.  The
//   red channel represents the x normal coordinate, the green channel
//   represents the y normal coordinate, and the blue channel represents the z
//   normal coordinate.  Initially, the normal coordinates are between -0.5
//   and +0.5, but when stored in the bitmap, this range is mapped from 0 to
//   255.
// - A Windows bitmap file (*.bmp) containing the specularity map of the
//   terrain.  Black indicates no specularity, while white indicates full
//   specularity.
//
// The grid of elevation points can have a maximum horizontal resolution of
// 0.25 arcseconds (~7.5 meters.)  A higher-resolution grid will cause the
// terrain to appear blurry.
//
// The terrain elevations are generated by a collection of over a hundred
// noise modules in a hierarchy of groups and subgroups.  Each group and
// subgroup outputs a single output value that originates from a caching
// module (noise::module::Cache).  Each group and subgroup can be thought of
// as a single complex noise module that can be used as a source module for
// other noise modules.  The caching module was chosen as the source of the
// output value to prevent costly recalculations by each group and subgroup
// requesting an output value from it.
"
Class {
	#name : 'NoPlanetExample',
	#superclass : 'Object',
	#instVars : [
		'baseContinentDef_pe0',
		'baseContinentDef_cu',
		'baseContinentDef_pe1',
		'baseContinentDef_sb',
		'baseContinentDef_mi',
		'baseContinentDef_cl',
		'baseContinentDef',
		'continentDef_tu0',
		'continentDef_tu1',
		'continentDef_tu2',
		'continentDef_se',
		'continentDef',
		'terrainTypeDef_tu',
		'terrainTypeDef_te',
		'terrainTypeDef',
		'mountainBaseDef_rm0',
		'mountainBaseDef_sb0',
		'mountainBaseDef_rm1',
		'mountainBaseDef_sb1',
		'mountainBaseDef_co',
		'mountainBaseDef_bl',
		'mountainBaseDef_tu0',
		'mountainBaseDef_tu1',
		'mountainBaseDef',
		'mountainousHigh_rm0',
		'mountainousHigh_rm1',
		'mountainousHigh_ma',
		'mountainousHigh_tu',
		'mountainousHigh',
		'mountainousLow_rm0',
		'mountainousLow_rm1',
		'mountainousLow_mu',
		'mountainousLow',
		'mountainousTerrain_sb0',
		'mountainousTerrain_sb1',
		'mountainousTerrain_ad',
		'mountainousTerrain_se',
		'mountainousTerrain_sb2',
		'mountainousTerrain_ex',
		'mountainousTerrain',
		'hillyTerrain_bi',
		'hillyTerrain_sb0',
		'hillyTerrain_rm',
		'hillyTerrain_sb1',
		'hillyTerrain_co',
		'hillyTerrain_bl',
		'hillyTerrain_sb2',
		'hillyTerrain_ex',
		'hillyTerrain_tu0',
		'hillyTerrain_tu1',
		'hillyTerrain',
		'plainsTerrain_bi0',
		'plainsTerrain_sb0',
		'plainsTerrain_bi1',
		'plainsTerrain_sb1',
		'plainsTerrain_mu',
		'plainsTerrain_sb2',
		'plainsTerrain',
		'badlandsSand_rm',
		'badlandsSand_sb0',
		'badlandsSand_vo',
		'badlandsSand_sb1',
		'badlandsSand_ad',
		'badlandsSand',
		'badlandsCliffs_pe',
		'badlandsCliffs_cu',
		'badlandsCliffs_cl',
		'badlandsCliffs_te',
		'badlandsCliffs_tu0',
		'badlandsCliffs_tu1',
		'badlandsCliffs',
		'badlandsTerrain_sb',
		'badlandsTerrain_ma',
		'badlandsTerrain',
		'riverPositions_rm0',
		'riverPositions_cu0',
		'riverPositions_rm1',
		'riverPositions_cu1',
		'riverPositions_mi',
		'riverPositions_tu',
		'riverPositions',
		'scaledMountainousTerrain_sb0',
		'scaledMountainousTerrain_pe',
		'scaledMountainousTerrain_ex',
		'scaledMountainousTerrain_sb1',
		'scaledMountainousTerrain_mu',
		'scaledMountainousTerrain',
		'scaledHillyTerrain_sb0',
		'scaledHillyTerrain_pe',
		'scaledHillyTerrain_ex',
		'scaledHillyTerrain_sb1',
		'scaledHillyTerrain_mu',
		'scaledHillyTerrain',
		'scaledPlainsTerrain_sb',
		'scaledPlainsTerrain',
		'scaledBadlandsTerrain_sb',
		'scaledBadlandsTerrain',
		'continentalShelf_te',
		'continentalShelf_rm',
		'continentalShelf_sb',
		'continentalShelf_cl',
		'continentalShelf_ad',
		'continentalShelf',
		'baseContinentElev_sb',
		'baseContinentElev_se',
		'baseContinentElev',
		'continentsWithPlains_ad',
		'continentsWithPlains',
		'continentsWithHills_ad',
		'continentsWithHills_se',
		'continentsWithHills',
		'continentsWithMountains_ad0',
		'continentsWithMountains_cu',
		'continentsWithMountains_ad1',
		'continentsWithMountains_se',
		'continentsWithMountains',
		'continentsWithBadlands_pe',
		'continentsWithBadlands_ad',
		'continentsWithBadlands_se',
		'continentsWithBadlands_ma',
		'continentsWithBadlands',
		'continentsWithRivers_sb',
		'continentsWithRivers_ad',
		'continentsWithRivers_se',
		'continentsWithRivers',
		'unscaledFinalPlanet',
		'finalPlanet_sb',
		'finalPlanet'
	],
	#pools : [
		'NoPlanetExampleConstants'
	],
	#category : 'LibNoise-Example',
	#package : 'LibNoise',
	#tag : 'Example'
}

{ #category : 'building' }
NoPlanetExample >> build [

	self buildContinent.
	self buildTerrain.
	self buildRivers.

	self buildScaled.
	
	self buildFinal
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsCliffsTerrain [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: badlands cliffs (7 noise modules)
  //
  // This subgroup generates the cliffs for the badlands.
  //
  // -1.0 represents the lowest elevations and +1.0 represents the highest
  // elevations.
  //"

	self buildBadlandsCliffsTerrainPerlin.
	self buildBadlandsCliffsTerrainCurve.
	self buildBadlandsCliffsTerrainClamp.
	self buildBadlandsCliffsTerrainTerrace.
	self buildBadlandsCliffsTerrainTurbulence0.
	self buildBadlandsCliffsTerrainTurbulence1.
	self buildBadlandsCliffsTerrainDefinition
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsCliffsTerrainClamp [
	"// 3: [Clamped-cliffs module]: This clamping module makes the tops of the
  //    cliffs very flat by clamping the output value from the cliff-shaping
  //    module so that the tops of the cliffs are very flat."

	badlandsCliffs_cl := NoClamp new autoRelease.
	badlandsCliffs_cl
		setSourceModuleIndex: 0 sourceModule: badlandsCliffs_cu;
		setBoundsLowerBound: -999.125 upperBound: 0.875
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsCliffsTerrainCurve [
	"// 2: [Cliff-shaping module]: Next, this curve module applies a curve to the
  //    output value from the cliff-basis module.  This curve is initially
  //    very shallow, but then its slope increases sharply.  At the highest
  //    elevations, the curve becomes very flat again.  This produces the
  //    stereotypical Utah-style desert cliffs."

	badlandsCliffs_cu := NoCurve new autoRelease.
	badlandsCliffs_cu
		setSourceModuleIndex: 0 sourceModule: badlandsCliffs_pe;
		addControlPointInputValue: -2.0000 outputValue: -2.0000;
		addControlPointInputValue: -1.0000 outputValue: -1.2500;
		addControlPointInputValue: -0.0000 outputValue: -0.7500;
		addControlPointInputValue:  0.5000 outputValue: -0.2500;
		addControlPointInputValue:  0.6250 outputValue:  0.8750;
		addControlPointInputValue:  0.7500 outputValue:  1.0000;
		addControlPointInputValue:  2.0000 outputValue:  1.2500
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsCliffsTerrainDefinition [
	"// 7: [Badlands-cliffs subgroup]: Caches the output value from the warped-
  //    cliffs module."

	badlandsCliffs := NoCache new autoRelease.
	badlandsCliffs
		setSourceModuleIndex: 0 sourceModule: badlandsCliffs_tu1
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsCliffsTerrainPerlin [
	"// 1: [Cliff-basis module]: This Perlin-noise module generates some coherent
  //    noise that will be used to generate the cliffs."

	badlandsCliffs_pe := NoPerlin new autoRelease.
	badlandsCliffs_pe
		setSeed: CUR_SEED + 90;
		setFrequency: CONTINENT_FREQUENCY * 839.0;
		setPersistence: 0.5;
		setLacunarity: BADLANDS_LACUNARITY;
		setOctaveCount: 6;
		setNoiseQuality: NoNoiseQuality QUALITY_STD
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsCliffsTerrainTerrace [
	"// 4: [Terraced-cliffs module]: Next, this terracing module applies some
  //    terraces to the clamped-cliffs module in the lower elevations before
  //    the sharp cliff transition."

	badlandsCliffs_te := NoTerrace new autoRelease.
	badlandsCliffs_te
		setSourceModuleIndex:0 sourceModule: badlandsCliffs_cl;
		addControlPoint: -1.0000;
		addControlPoint: -0.8750;
		addControlPoint: -0.7500;
		addControlPoint: -0.5000;
		addControlPoint:  0.0000;
		addControlPoint:  1.0000
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsCliffsTerrainTurbulence0 [
	"// 5: [Coarse-turbulence module]: This turbulence module warps the output
  //    value from the terraced-cliffs module, adding some coarse detail to
  //    it."

	badlandsCliffs_tu0 := NoTurbulence new autoRelease.
	badlandsCliffs_tu0
		setSeed: (CUR_SEED + 91);
		setSourceModuleIndex: 0 sourceModule: badlandsCliffs_te;
		setFrequency: 16111.0;
		setPower: (1.0 / 141539.0) * BADLANDS_TWIST;
		setRoughness: 3
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsCliffsTerrainTurbulence1 [
	"// 6: [Warped-cliffs module]: This turbulence module warps the output value
  //    from the coarse-turbulence module.  This turbulence has a higher
  //    frequency, but lower power, than the coarse-turbulence module, adding
  //    some fine detail to it."

	badlandsCliffs_tu1 := NoTurbulence new autoRelease.
	badlandsCliffs_tu1
		setSeed: CUR_SEED + 92;
		setSourceModuleIndex: 0 sourceModule: badlandsCliffs_tu0;
		setFrequency: 36107.0;
		setPower: (1.0 / 211543.0) * BADLANDS_TWIST;
		setRoughness: 3
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsSandTerrain [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: badlands sand (6 noise modules)
  //
  // This subgroup generates the sandy terrain for the badlands.
  //
  // -1.0 represents the lowest elevations and +1.0 represents the highest
  // elevations.
  //"

	self buildBadlandsSandTerrainRidges.
	self buildBadlandsSandTerrainScale0.
	self buildBadlandsSandTerrainVoronoi.
	self buildBadlandsSandTerrainScale1.
	self buildBadlandsSandTerrainAdd.
	self buildBadlandsSandTerrainDefinition
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsSandTerrainAdd [
	"// 5: [Dunes-with-detail module]: This addition module combines the scaled-
  //    sand-dunes module with the scaled-dune-detail module."

	badlandsSand_ad := NoAdd new autoRelease.
	badlandsSand_ad
		setSourceModuleIndex: 0 sourceModule: badlandsSand_sb0;
		setSourceModuleIndex: 1 sourceModule: badlandsSand_sb1
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsSandTerrainDefinition [
	"// 6: [Badlands-sand subgroup]: Caches the output value from the dunes-with-
  //    detail module."
  
	badlandsSand := NoCache new autoRelease.
	badlandsSand
		setSourceModuleIndex: 0 sourceModule: badlandsSand_ad
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsSandTerrainRidges [
	"// 1: [Sand-dunes module]: This ridged-multifractal-noise module generates
  //    sand dunes.  This ridged-multifractal noise is generated with a single
  //    octave, which makes very smooth dunes."

	badlandsSand_rm := NoRidgedMulti new autoRelease.
	badlandsSand_rm
		setSeed: CUR_SEED + 80;
		setFrequency: 6163.5;
		setLacunarity: BADLANDS_LACUNARITY;
		setNoiseQuality: NoNoiseQuality QUALITY_BEST;
		setOctaveCount: 1
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsSandTerrainScale0 [
	"// 2: [Scaled-sand-dunes module]: This scale/bias module shrinks the dune
  //    heights by a small amount.  This is necessary so that the subsequent
  //    noise modules in this subgroup can add some detail to the dunes."

	badlandsSand_sb0 := NoScaleBias new autoRelease.
	badlandsSand_sb0
		setSourceModuleIndex: 0  sourceModule: badlandsSand_rm;
		setScale: 0.875;
		setBias: 0.0
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsSandTerrainScale1 [
	"// 4: [Scaled-dune-detail module]: This scale/bias module shrinks the dune
  //    details by a large amount.  This is necessary so that the subsequent
  //    noise modules in this subgroup can add this detail to the sand-dunes
  //    module."

	badlandsSand_sb1 := NoScaleBias new autoRelease.
	badlandsSand_sb1
		setSourceModuleIndex: 0 sourceModule: badlandsSand_vo;
		setScale: 0.25;
		setBias: 0.25
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsSandTerrainVoronoi [
	"// 3: [Dune-detail module]: This noise module uses Voronoi polygons to
  //    generate the detail to add to the dunes.  By enabling the distance
  //    algorithm, small polygonal pits are generated; the edges of the pits
  //    are joined to the edges of nearby pits."

	badlandsSand_vo := NoVoronoi new autoRelease.
	badlandsSand_vo
		setSeed: CUR_SEED + 81;
		setFrequency: 16183.25;
		setDisplacement: 0.0;
		enableDistance: true
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsTerrain [

	self buildBadlandsSandTerrain.
	self buildBadlandsCliffsTerrain.
	
	" ////////////////////////////////////////////////////////////////////////////
  // Module subgroup: badlands terrain (3 noise modules)
  //
  // Generates the final badlands terrain.
  //
  // Using a scale/bias module, the badlands sand is flattened considerably,
  // then the sand elevations are lowered to around -1.0.  The maximum value
  // from the flattened sand module and the cliff module contributes to the
  // final elevation.  This causes sand to appear at the low elevations since
  // the sand is slightly higher than the cliff base.
  //
  // -1.0 represents the lowest elevations and +1.0 represents the highest
  // elevations.
  //"
	self buildBadlandsTerrainScale.
	self buildBadlandsTerrainMax.
	self buildBadlandsTerrainDefinition
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsTerrainDefinition [
	"// 3: [Badlands-terrain group]: Caches the output value from the dunes-and-
  //    cliffs module.  This is the output value for the entire badlands-
  //    terrain group."

	badlandsTerrain := NoCache new autoRelease.
	badlandsTerrain
		setSourceModuleIndex: 0 sourceModule: badlandsTerrain_ma
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsTerrainMax [
	"// 2: [Dunes-and-cliffs module]: This maximum-value module causes the dunes
  //    to appear in the low areas and the cliffs to appear in the high areas.
  //    It does this by selecting the maximum of the output values from the
  //    scaled-sand-dunes module and the badlands-cliffs subgroup."

	badlandsTerrain_ma := NoMax new autoRelease.
	badlandsTerrain_ma
		setSourceModuleIndex: 0 sourceModule: badlandsCliffs;
		setSourceModuleIndex: 1 sourceModule: badlandsTerrain_sb
]

{ #category : 'building - terrain - badlands' }
NoPlanetExample >> buildBadlandsTerrainScale [
	"// 1: [Scaled-sand-dunes module]: This scale/bias module considerably
  //    flattens the output value from the badlands-sands subgroup and lowers
  //    this value to near -1.0."

	badlandsTerrain_sb := NoScaleBias new autoRelease.
	badlandsTerrain_sb
		setSourceModuleIndex: 0 sourceModule: badlandsSand;
		setScale: 0.25;
		setBias: -0.75
]

{ #category : 'building - continents' }
NoPlanetExample >> buildBaseContinent [

	self buildBaseContinentPerlin0.
	self buildBaseContinentCurve.
	self buildBaseContinentPerlin1.
	self buildContinentScaledCarver.
	self buildContinentCarvedContinent.
	self buildContinentClampedContinent.
	self buildContinentBaseDefinition
]

{ #category : 'building - continents' }
NoPlanetExample >> buildBaseContinentCurve [
	"// 2: [Continent-with-ranges module]: Next, a curve module modifies the
  	//    output value from the continent module so that very high values appear
  	//    near sea level.  This defines the positions of the mountain ranges."
  
	baseContinentDef_cu := NoCurve new autoRelease.
  	baseContinentDef_cu
		setSourceModuleIndex: 0 sourceModule: baseContinentDef_pe0;
  		addControlPointInputValue: -2.0000 + SEA_LEVEL outputValue: -1.625 + SEA_LEVEL;
  		addControlPointInputValue: -1.0000 + SEA_LEVEL outputValue: -1.375 + SEA_LEVEL;
  		addControlPointInputValue:  0.0000 + SEA_LEVEL outputValue: -0.375 + SEA_LEVEL;
  		addControlPointInputValue:  0.0625 + SEA_LEVEL outputValue:  0.125 + SEA_LEVEL;
  		addControlPointInputValue:  0.1250 + SEA_LEVEL outputValue:  0.250 + SEA_LEVEL;
  		addControlPointInputValue:  0.2500 + SEA_LEVEL outputValue:  1.000 + SEA_LEVEL;
  		addControlPointInputValue:  0.5000 + SEA_LEVEL outputValue:  0.250 + SEA_LEVEL;
  		addControlPointInputValue:  0.7500 + SEA_LEVEL outputValue:  0.250 + SEA_LEVEL;
  		addControlPointInputValue:  1.0000 + SEA_LEVEL outputValue:  0.500 + SEA_LEVEL;
  		addControlPointInputValue:  2.0000 + SEA_LEVEL outputValue:  0.500 + SEA_LEVEL
]

{ #category : 'building - continents' }
NoPlanetExample >> buildBaseContinentPerlin0 [
  	"// 1: [Continent module]: This Perlin-noise module generates the continents.
  	 //    This noise module has a high number of octaves so that detail is
  	 //    visible at high zoom levels."
	
	baseContinentDef_pe0 := NoPerlin new autoRelease.
  	baseContinentDef_pe0 
		setSeed: CUR_SEED + 0;
  		setFrequency: CONTINENT_FREQUENCY;
  		setPersistence: 0.5;
  		setLacunarity: CONTINENT_LACUNARITY;
  		setOctaveCount: 14;
  		setNoiseQuality: NoNoiseQuality QUALITY_STD
]

{ #category : 'building - continents' }
NoPlanetExample >> buildBaseContinentPerlin1 [
	"// 3: [Carver module]: This higher-frequency Perlin-noise module will be
	//    used by subsequent noise modules to carve out chunks from the mountain
	//    ranges within the continent-with-ranges module so that the mountain
	//    ranges will not be complely impassible."
	
	baseContinentDef_pe1 := NoPerlin new autoRelease.
	baseContinentDef_pe1 
		setSeed: CUR_SEED + 1;
		setFrequency: CONTINENT_FREQUENCY * 4.34375;
		setPersistence: 0.5;
		setLacunarity: CONTINENT_LACUNARITY;
		setOctaveCount: 11;
		setNoiseQuality: NoNoiseQuality QUALITY_STD
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildBaseMointainTerrainLow [
	" // 5: [Low-flat module]: This low constant value is used by step 6."
	
	mountainBaseDef_co := NoConst new autoRelease.
	mountainBaseDef_co 
		setConstValue: -1.0
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildBaseMointainTerrainRivers [
	"// 3: [River-valley module]: This ridged-multifractal-noise module generates
  //    the river valleys.  It has a much lower frequency than the mountain-
  //    ridge module so that more mountain ridges will appear outside of the
  //    valleys.  Note that this noise module generates ridged-multifractal
  //    noise using only one octave; this information will be important in the
  //    next step."

	mountainBaseDef_rm1 := NoRidgedMulti new autoRelease.
	mountainBaseDef_rm1
		setSeed: CUR_SEED + 31;
		setFrequency: 367.0;
		setLacunarity: MOUNTAIN_LACUNARITY;
		setOctaveCount: 1;
		setNoiseQuality: NoNoiseQuality QUALITY_BEST
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildBaseMointainTerrainScale0 [
	"// 2: [Scaled-mountain-ridge module]: Next, a scale/bias module scales the
  //    output value from the mountain-ridge module so that its ridges are not
  //    too high.  The reason for this is that another subgroup adds actual
  //    mountainous terrain to these ridges."

	mountainBaseDef_sb0 := NoScaleBias new autoRelease.
	mountainBaseDef_sb0
		setSourceModuleIndex: 0 sourceModule: mountainBaseDef_rm0;
		setScale: 0.5;
		setBias: 0.375
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildBaseMointainTerrainScale1 [
	"// 4: [Scaled-river-valley module]: Next, a scale/bias module applies a
  //    scaling factor of -2.0 to the output value from the river-valley
  //    module.  This stretches the possible elevation values because one-
  //    octave ridged-multifractal noise has a lower range of output values
  //    than multiple-octave ridged-multifractal noise.  The negative scaling
  //    factor inverts the range of the output value, turning the ridges from
  //    the river-valley module into valleys."
	
	mountainBaseDef_sb1 := NoScaleBias new autoRelease.
	mountainBaseDef_sb1
		setSourceModuleIndex: 0 sourceModule: mountainBaseDef_rm1;
		setScale: -2.0;
		setBias: -0.5
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildBaseMountainTerrain [

	self buildBaseMountainTerrainRidges0.
	self buildBaseMointainTerrainScale0.
	self buildBaseMointainTerrainRivers.
	self buildBaseMointainTerrainScale1.
	self buildBaseMointainTerrainLow.
	self buildBaseMountainTerrainBlender.
	self buildBaseMountainTerrainTurbulence0.
	self buildBaseMountainTerrainTurbulence1.
	self buildBaseMountainTerrainDefinition
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildBaseMountainTerrainBlender [
	"// 6: [Mountains-and-valleys module]: This blender module merges the
  //    scaled-mountain-ridge module and the scaled-river-valley module
  //    together.  It causes the low-lying areas of the terrain to become
  //    smooth, and causes the high-lying areas of the terrain to contain
  //    ridges.  To do this, it uses the scaled-river-valley module as the
  //    control module, causing the low-flat module to appear in the lower
  //    areas and causing the scaled-mountain-ridge module to appear in the
  //    higher areas."

	mountainBaseDef_bl := NoBlend new autoRelease.
	mountainBaseDef_bl
		setSourceModuleIndex: 0 sourceModule: mountainBaseDef_co;
		setSourceModuleIndex: 1 sourceModule: mountainBaseDef_sb0;
		setControlModule: mountainBaseDef_sb1
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildBaseMountainTerrainDefinition [
	"// 9: [Mountain-base-definition subgroup]: Caches the output value from the
  //    warped-mountains-and-valleys module."

	mountainBaseDef := NoCache new autoRelease.
	mountainBaseDef setSourceModuleIndex: 0 sourceModule: mountainBaseDef_tu1
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildBaseMountainTerrainRidges0 [

	
  "// 1: [Mountain-ridge module]: This ridged-multifractal-noise module
  //    generates the mountain ridges."
	mountainBaseDef_rm0 := NoRidgedMulti new autoRelease.
	mountainBaseDef_rm0
		setSeed: CUR_SEED + 30;
		setFrequency: 1723.0;
		setLacunarity: MOUNTAIN_LACUNARITY;
		setOctaveCount: 4;
		setNoiseQuality: NoNoiseQuality QUALITY_STD
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildBaseMountainTerrainTurbulence0 [
	"// 7: [Coarse-turbulence module]: This turbulence module warps the output
  //    value from the mountain-and-valleys module, adding some coarse detail
  //    to it."

	mountainBaseDef_tu0 := NoTurbulence new autoRelease.
	mountainBaseDef_tu0
		setSourceModuleIndex: 0 sourceModule: mountainBaseDef_bl;
		setSeed: CUR_SEED + 32;
		setFrequency: 1337.0;
		setPower: (1.0 / 6730.0) * MOUNTAINS_TWIST;
		setRoughness: 4
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildBaseMountainTerrainTurbulence1 [
	"// 8: [Warped-mountains-and-valleys module]: This turbulence module warps
  //    the output value from the coarse-turbulence module.  This turbulence
  //    has a higher frequency, but lower power, than the coarse-turbulence
  //    module, adding some fine detail to it."

	mountainBaseDef_tu1 := NoTurbulence new autoRelease.
	mountainBaseDef_tu1
		setSourceModuleIndex: 0 sourceModule: mountainBaseDef_tu0;
		setSeed: CUR_SEED + 33;
		setFrequency: 21221.0;
		setPower: (1.0 / 120157.0) * MOUNTAINS_TWIST;
		setRoughness: 6
]

{ #category : 'building - continents' }
NoPlanetExample >> buildContinent [
	"
  ////////////////////////////////////////////////////////////////////////////
  // Module group: continent definition
  ////////////////////////////////////////////////////////////////////////////
	"
	
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: base continent definition (7 noise modules)
  //
  // This subgroup roughly defines the positions and base elevations of the
  // planet's continents.
  //
  // The ""base elevation"" is the elevation of the terrain before any terrain
  // features (mountains, hills, etc.) are placed on that terrain.
  //
  // -1.0 represents the lowest elevations and +1.0 represents the highest
  // elevations.
  //"
	self buildBaseContinent.
	
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: continent definition (5 noise modules)
  //
  // This subgroup warps the output value from the the base-continent-
  // definition subgroup, producing more realistic terrain.
  //
  // Warping the base continent definition produces lumpier terrain with
  // cliffs and rifts.
  //
  // -1.0 represents the lowest elevations and +1.0 represents the highest
  // elevations.
  //"
	self buildContinentTurbulence0.
	self buildContinentTurbulence1.
	self buildContinentTurbulence2.
	self buildContinentSelect.
	self buildContinentDefinition
]

{ #category : 'building - continents' }
NoPlanetExample >> buildContinentBaseDefinition [
	"// 7: [Base-continent-definition subgroup]: Caches the output value from the
  //    clamped-continent module."
	
	baseContinentDef := NoCache new autoRelease.
	baseContinentDef 
		setSourceModuleIndex: 0 sourceModule: baseContinentDef_cl
]

{ #category : 'building - continents' }
NoPlanetExample >> buildContinentCarvedContinent [
	"// 5: [Carved-continent module]: This minimum-value module carves out chunks
  //    from the continent-with-ranges module.  It does this by ensuring that
  //    only the minimum of the output values from the scaled-carver module
  //    and the continent-with-ranges module contributes to the output value
  //    of this subgroup.  Most of the time, the minimum-value module will
  //    select the output value from the continents-with-ranges module since
  //    the output value from the scaled-carver module is usually near 1.0.
  //    Occasionally, the output value from the scaled-carver module will be
  //    less than the output value from the continent-with-ranges module, so
  //    in this case, the output value from the scaled-carver module is
  //    selected."
	
	baseContinentDef_mi := NoMin new autoRelease.
	baseContinentDef_mi 
		setSourceModuleIndex: 0 sourceModule: baseContinentDef_sb;
		setSourceModuleIndex: 1 sourceModule: baseContinentDef_cu
]

{ #category : 'building - continents' }
NoPlanetExample >> buildContinentClampedContinent [
	"// 6: [Clamped-continent module]: Finally, a clamp module modifies the
  //    carved-continent module to ensure that the output value of this
  //    subgroup is between -1.0 and 1.0."
	
	baseContinentDef_cl := NoClamp new autoRelease.
	baseContinentDef_cl 
		setSourceModuleIndex: 0 sourceModule: baseContinentDef_mi;
		setBoundsLowerBound: -1.0  upperBound: 1.0
]

{ #category : 'building - continents' }
NoPlanetExample >> buildContinentDefinition [
	" // 7: [Continent-definition group]: Caches the output value from the
  //    clamped-continent module.  This is the output value for the entire
  //    continent-definition group."
	
	continentDef := NoCache new autoRelease.
	continentDef 
		setSourceModuleIndex: 0 sourceModule: continentDef_se
]

{ #category : 'building - continents' }
NoPlanetExample >> buildContinentScaledCarver [
	"// 4: [Scaled-carver module]: This scale/bias module scales the output
  	//    value from the carver module such that it is usually near 1.0.  This
  	//    is required for step 5."
	
	baseContinentDef_sb := NoScaleBias new autoRelease.
	baseContinentDef_sb 
		setSourceModuleIndex: 0 sourceModule: baseContinentDef_pe1;
		setScale: 0.375;
		setBias: 0.625
]

{ #category : 'building - continents' }
NoPlanetExample >> buildContinentSelect [
	"// 4: [Select-turbulence module]: At this stage, the turbulence is applied
  //    to the entire base-continent-definition subgroup, producing some very
  //    rugged, unrealistic coastlines.  This selector module selects the
  //    output values from the (unwarped) base-continent-definition subgroup
  //    and the warped-base-continent-definition module, based on the output
  //    value from the (unwarped) base-continent-definition subgroup.  The
  //    selection boundary is near sea level and has a relatively smooth
  //    transition.  In effect, only the higher areas of the base-continent-
  //    definition subgroup become warped; the underwater and coastal areas
  //    remain unaffected."

	continentDef_se := NoSelect new autoRelease.
	continentDef_se 
		setSourceModuleIndex: 0 sourceModule: baseContinentDef;
		setSourceModuleIndex: 1 sourceModule: continentDef_tu2;
		setControlModule: baseContinentDef;
		setBoundsLowerBound: SEA_LEVEL - 0.0375 upperBound: SEA_LEVEL + 1000.0375;
		setEdgeFalloff: 0.0625
]

{ #category : 'building - continents' }
NoPlanetExample >> buildContinentTurbulence0 [
	"// 1: [Coarse-turbulence module]: This turbulence module warps the output
  //    value from the base-continent-definition subgroup, adding some coarse
  //    detail to it."
	
	continentDef_tu0 := NoTurbulence new autoRelease.
	continentDef_tu0 
		setSourceModuleIndex: 0 sourceModule: baseContinentDef;
		setSeed: CUR_SEED + 10;
		setFrequency: CONTINENT_FREQUENCY * 15.25;
		setPower: CONTINENT_FREQUENCY / 113.75;
		setRoughness: 13
]

{ #category : 'building - continents' }
NoPlanetExample >> buildContinentTurbulence1 [
	"// 2: [Intermediate-turbulence module]: This turbulence module warps the
  //    output value from the coarse-turbulence module.  This turbulence has
  //    a higher frequency, but lower power, than the coarse-turbulence
  //    module, adding some intermediate detail to it."
	
	continentDef_tu1 := NoTurbulence new autoRelease.
	continentDef_tu1 
		setSourceModuleIndex: 0 sourceModule: continentDef_tu0;
		setSeed: CUR_SEED + 11;
		setFrequency: CONTINENT_FREQUENCY * 47.25;
		setPower: CONTINENT_FREQUENCY / 433.75;
		setRoughness: 12
]

{ #category : 'building - continents' }
NoPlanetExample >> buildContinentTurbulence2 [
	"// 3: [Warped-base-continent-definition module]: This turbulence module
  //    warps the output value from the intermediate-turbulence module.  This
  //    turbulence has a higher frequency, but lower power, than the
  //    intermediate-turbulence module, adding some fine detail to it."
	
	continentDef_tu2 := NoTurbulence new autoRelease.
	continentDef_tu2 
		setSourceModuleIndex: 0  sourceModule: continentDef_tu1;
		setSeed: CUR_SEED + 12;
		setFrequency: CONTINENT_FREQUENCY * 95.25;
		setPower: CONTINENT_FREQUENCY / 1019.75;
		setRoughness: 11
]

{ #category : 'building - final - elevations' }
NoPlanetExample >> buildContinentalElevations [
	"////////////////////////////////////////////////////////////////////////////
  // Module group: base continent elevations (3 noise modules)
  //
  // This subgroup generates the base elevations for the continents, before
  // terrain features are added.
  //
  // The output value from this module subgroup is measured in planetary
  // elevation units (-1.0 for the lowest underwater trenches and +1.0 for the
  // highest mountain peaks.)
  //"

	self buildContinentalElevationsScale.
	self buildContinentalElevationsSelect.
	self buildContinentalElevationsDefinition
]

{ #category : 'building - final - elevations' }
NoPlanetExample >> buildContinentalElevationsDefinition [
	"// 3: [Base-continent-elevation subgroup]: Caches the output value from the
  //    base-continent-with-oceans module."

	baseContinentElev := NoCache new autoRelease.
	baseContinentElev
		setSourceModuleIndex: 0 sourceModule: baseContinentElev_se
]

{ #category : 'building - final - elevations' }
NoPlanetExample >> buildContinentalElevationsScale [
	"// 1: [Base-scaled-continent-elevations module]: This scale/bias module
  //    scales the output value from the continent-definition group so that it
  //    is measured in planetary elevation units"
 
	baseContinentElev_sb := NoScaleBias new autoRelease.
	baseContinentElev_sb 
		setSourceModuleIndex: 0 sourceModule: continentDef;
		setScale: CONTINENT_HEIGHT_SCALE;
		setBias: 0.0
]

{ #category : 'building - final - elevations' }
NoPlanetExample >> buildContinentalElevationsSelect [
	"// 2: [Base-continent-with-oceans module]: This selector module applies the
  //    elevations of the continental shelves to the base elevations of the
  //    continent.  It does this by selecting the output value from the
  //    continental-shelf subgroup if the corresponding output value from the
  //    continent-definition group is below the shelf level.  Otherwise, it
  //    selects the output value from the base-scaled-continent-elevations
  //    module."

	baseContinentElev_se := NoSelect new autoRelease.
	baseContinentElev_se
		setSourceModuleIndex: 0 sourceModule: baseContinentElev_sb;
		setSourceModuleIndex: 1 sourceModule: continentalShelf;
		setControlModule: continentDef;
		setBoundsLowerBound: (SHELF_LEVEL - 1000.0) upperBound: SHELF_LEVEL;
		setEdgeFalloff: 0.03125
]

{ #category : 'building - final - shelf' }
NoPlanetExample >> buildContinentalShelf [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: continental shelf (6 noise modules)
  //
  // This module subgroup creates the continental shelves.
  //
  // The output value from this module subgroup are measured in planetary
  // elevation units (-1.0 for the lowest underwater trenches and +1.0 for the
  // highest mountain peaks.)
  //"

	self buildContinentalShelfTerrace.
	self buildContinentalShelfRidges.
	self buildContinentalShelfScale.
	self buildContinentalShelfClamp.
	self buildContinentalShelfAdd.
	self buildContinentalShelfDefinition
]

{ #category : 'building - final - shelf' }
NoPlanetExample >> buildContinentalShelfAdd [
	" // 5: [Shelf-and-trenches module]: This addition module adds the oceanic
  //    trenches to the clamped-sea-bottom module."

	continentalShelf_ad := NoAdd new autoRelease.
	continentalShelf_ad
		setSourceModuleIndex: 0 sourceModule: continentalShelf_sb;
		setSourceModuleIndex: 1 sourceModule: continentalShelf_cl
]

{ #category : 'building - final - shelf' }
NoPlanetExample >> buildContinentalShelfClamp [
	"// 4: [Clamped-sea-bottom module]: This clamping module clamps the output
  //    value from the shelf-creator module so that its possible range is
  //    from the bottom of the ocean to sea level.  This is done because this
  //    subgroup is only concerned about the oceans."

	continentalShelf_cl := NoClamp new autoRelease.
	continentalShelf_cl
		setSourceModuleIndex: 0 sourceModule: continentalShelf_te;
		setBoundsLowerBound: -0.75 upperBound: SEA_LEVEL
]

{ #category : 'building - final - shelf' }
NoPlanetExample >> buildContinentalShelfDefinition [
	"// 6: [Continental-shelf subgroup]: Caches the output value from the shelf-
  //    and-trenches module."
  
	continentalShelf := NoCache new autoRelease.
	continentalShelf 
		setSourceModuleIndex: 0 sourceModule: continentalShelf_ad
]

{ #category : 'building - final - shelf' }
NoPlanetExample >> buildContinentalShelfRidges [
	"// 2: [Oceanic-trench-basis module]: This ridged-multifractal-noise module
  //    generates some coherent noise that will be used to generate the
  //    oceanic trenches.  The ridges represent the bottom of the trenches."

	continentalShelf_rm := NoRidgedMulti new autoRelease.
	continentalShelf_rm
		setSeed: CUR_SEED + 130;
		setFrequency: CONTINENT_FREQUENCY * 4.375;
		setLacunarity: CONTINENT_LACUNARITY;
		setOctaveCount: 16;
		setNoiseQuality: NoNoiseQuality QUALITY_BEST
]

{ #category : 'building - final - shelf' }
NoPlanetExample >> buildContinentalShelfScale [
	"// 3: [Oceanic-trench module]: This scale/bias module inverts the ridges
  //    from the oceanic-trench-basis-module so that the ridges become
  //    trenches.  This noise module also reduces the depth of the trenches so
  //    that their depths are measured in planetary elevation units."

	continentalShelf_sb := NoScaleBias new autoRelease.
	continentalShelf_sb
		setSourceModuleIndex: 0 sourceModule: continentalShelf_rm;
		setScale: -0.125;
		setBias: -0.125
]

{ #category : 'building - final - shelf' }
NoPlanetExample >> buildContinentalShelfTerrace [
	"// 1: [Shelf-creator module]: This terracing module applies a terracing
  //    curve to the continent-definition group at the specified shelf level.
  //    This terrace becomes the continental shelf.  Note that this terracing
  //    module also places another terrace below the continental shelf near
  //    -1.0.  The bottom of this terrace is defined as the bottom of the
  //    ocean; subsequent noise modules will later add oceanic trenches to the
  //    bottom of the ocean."

	continentalShelf_te := NoTerrace new autoRelease.
	continentalShelf_te
		setSourceModuleIndex: 0 sourceModule: continentDef;
		addControlPoint: -1.0;
		addControlPoint: -0.75;
		addControlPoint: SHELF_LEVEL;
		addControlPoint: 1.0
]

{ #category : 'building - final - badlands' }
NoPlanetExample >> buildContinentsWithBadlands [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: continents with badlands (5 noise modules)
  //
  // This subgroup applies the scaled-badlands-terrain group to the
  // continents-with-mountains subgroup.
  //
  // The output value from this module subgroup is measured in planetary
  // elevation units (-1.0 for the lowest underwater trenches and +1.0 for the
  // highest mountain peaks.)
  //"

	self buildContinentsWithBadlandsPerlin.
	self buildContinentsWithBadlandsAdd.
	self buildContinentsWithBadlandsSelect.
	self buildContinentsWithBadlandsMax.
	self buildContinentsWithBadlandsDefinition
	
]

{ #category : 'building - final - badlands' }
NoPlanetExample >> buildContinentsWithBadlandsAdd [
	"// 2: [Continents-and-badlands module]:  This addition module adds the
  //    scaled-badlands-terrain group to the base-continent-elevation
  //    subgroup."

	continentsWithBadlands_ad := NoAdd new autoRelease.
	continentsWithBadlands_ad
		setSourceModuleIndex: 0 sourceModule: baseContinentElev;
		setSourceModuleIndex: 1 sourceModule: scaledBadlandsTerrain
]

{ #category : 'building - final - badlands' }
NoPlanetExample >> buildContinentsWithBadlandsDefinition [
	"// 5: [Continents-with-badlands subgroup]: Caches the output value from the
  //    apply-badlands module."

	continentsWithBadlands := NoCache new autoRelease.
	continentsWithBadlands
		setSourceModuleIndex: 0 sourceModule: continentsWithBadlands_ma
]

{ #category : 'building - final - badlands' }
NoPlanetExample >> buildContinentsWithBadlandsMax [
	"// 4: [Apply-badlands module]: This maximum-value module causes the badlands
  //    to ""poke out"" from the rest of the terrain.  It does this by ensuring
  //    that only the maximum of the output values from the continents-with-
  //    mountains subgroup and the select-badlands-positions modules
  //    contribute to the output value of this subgroup.  One side effect of
  //    this process is that the badlands will not appear in mountainous
  //    terrain."

	continentsWithBadlands_ma := NoMax new autoRelease.
	continentsWithBadlands_ma 
		setSourceModuleIndex: 0 sourceModule: continentsWithMountains;
		setSourceModuleIndex: 1 sourceModule: continentsWithBadlands_se
]

{ #category : 'building - final - badlands' }
NoPlanetExample >> buildContinentsWithBadlandsPerlin [
	"// 1: [Badlands-positions module]: This Perlin-noise module generates some
  //    random noise, which is used by subsequent noise modules to specify the
  //    locations of the badlands."

	continentsWithBadlands_pe := NoPerlin new autoRelease.
	continentsWithBadlands_pe
		setSeed: CUR_SEED + 140;
		setFrequency: 16.5;
		setPersistence: 0.5;
		setLacunarity: CONTINENT_LACUNARITY;
		setOctaveCount: 2;
		setNoiseQuality: NoNoiseQuality QUALITY_STD
]

{ #category : 'building - final - badlands' }
NoPlanetExample >> buildContinentsWithBadlandsSelect [
	"// 3: [Select-badlands-positions module]: This selector module places
  //    badlands at random spots on the continents based on the Perlin noise
  //    generated by the badlands-positions module.  To do this, it selects
  //    the output value from the continents-and-badlands module if the
  //    corresponding output value from the badlands-position module is
  //    greater than a specified value.  Otherwise, this selector module
  //    selects the output value from the continents-with-mountains subgroup.
  //    There is also a wide transition between these two noise modules so
  //    that the badlands can blend into the rest of the terrain on the
  //    continents."

	continentsWithBadlands_se := NoSelect new autoRelease.
	continentsWithBadlands_se
		setSourceModuleIndex: 0 sourceModule: continentsWithMountains;
		setSourceModuleIndex: 1 sourceModule: continentsWithBadlands_ad;
		setControlModule: continentsWithBadlands_pe;
		setBoundsLowerBound: (1.0 - BADLANDS_AMOUNT) upperBound: (1001.0 - BADLANDS_AMOUNT);
		setEdgeFalloff: 0.25
]

{ #category : 'building - final - hills' }
NoPlanetExample >> buildContinentsWithHills [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: continents with hills (3 noise modules)
  //
  // This subgroup applies the scaled-hilly-terrain group to the continents-
  // with-plains subgroup.
  //
  // The output value from this module subgroup is measured in planetary
  // elevation units (-1.0 for the lowest underwater trenches and +1.0 for the
  // highest mountain peaks.)
  //"

	self buildContinentsWithHillsAdd.
	self buildContinentsWithHillsSelect.
	self buildContinentsWithHillsDefinition
]

{ #category : 'building - final - hills' }
NoPlanetExample >> buildContinentsWithHillsAdd [
	"// 1: [Continents-with-hills module]:  This addition module adds the scaled-
  //    hilly-terrain group to the base-continent-elevation subgroup."

	continentsWithHills_ad := NoAdd new autoRelease.
	continentsWithHills_ad
		setSourceModuleIndex: 0 sourceModule: baseContinentElev;
		setSourceModuleIndex: 1 sourceModule: scaledHillyTerrain
]

{ #category : 'building - final - hills' }
NoPlanetExample >> buildContinentsWithHillsDefinition [
	"// 3: [Continents-with-hills subgroup]: Caches the output value from the
  //    select-high-elevations module."

	continentsWithHills := NoCache new autoRelease.
	continentsWithHills
		setSourceModuleIndex: 0 sourceModule: continentsWithHills_se
]

{ #category : 'building - final - hills' }
NoPlanetExample >> buildContinentsWithHillsSelect [
	"// 2: [Select-high-elevations module]: This selector module ensures that
  //    the hills only appear at higher elevations.  It does this by selecting
  //    the output value from the continent-with-hills module if the
  //    corresponding output value from the terrain-type-defintion group is
  //    above a certain value. Otherwise, it selects the output value from the
  //    continents-with-plains subgroup."

	continentsWithHills_se := NoSelect new autoRelease.
	continentsWithHills_se
		setSourceModuleIndex: 0 sourceModule: continentsWithPlains;
		setSourceModuleIndex: 1 sourceModule: continentsWithHills_ad;
		setControlModule: terrainTypeDef;
		setBoundsLowerBound: (1.0 - HILLS_AMOUNT) upperBound: (1001.0 - HILLS_AMOUNT);
		setEdgeFalloff: 0.25
]

{ #category : 'building - final - mountains' }
NoPlanetExample >> buildContinentsWithMountains [
	" ////////////////////////////////////////////////////////////////////////////
  // Module subgroup: continents with mountains (5 noise modules)
  //
  // This subgroup applies the scaled-mountainous-terrain group to the
  // continents-with-hills subgroup.
  //
  // The output value from this module subgroup is measured in planetary
  // elevation units (-1.0 for the lowest underwater trenches and +1.0 for the
  // highest mountain peaks.)
  //"

	self buildContinentsWithMountainsAdd0.
	self buildContinentsWithMountainsCurve.
	self buildContinentsWithMountainsAdd1.
	self buildContinentsWithMountainsSelect.
	self buildContinentsWithMountainsDefinition
]

{ #category : 'building - final - mountains' }
NoPlanetExample >> buildContinentsWithMountainsAdd0 [
	"// 1: [Continents-and-mountains module]:  This addition module adds the
  //    scaled-mountainous-terrain group to the base-continent-elevation
  //    subgroup."

	continentsWithMountains_ad0 := NoAdd new autoRelease.
	continentsWithMountains_ad0
		setSourceModuleIndex: 0 sourceModule: baseContinentElev;
		setSourceModuleIndex: 1 sourceModule: scaledMountainousTerrain
]

{ #category : 'building - final - mountains' }
NoPlanetExample >> buildContinentsWithMountainsAdd1 [
	"// 3: [Add-increased-mountain-heights module]: This addition module adds
  //    the increased-mountain-heights module to the continents-and-
  //    mountains module.  The highest continent elevations now have the
  //    highest mountains."

	continentsWithMountains_ad1 := NoAdd new autoRelease.
	continentsWithMountains_ad1
		setSourceModuleIndex: 0 sourceModule: continentsWithMountains_ad0;
		setSourceModuleIndex: 1 sourceModule: continentsWithMountains_cu
]

{ #category : 'building - final - mountains' }
NoPlanetExample >> buildContinentsWithMountainsCurve [
	"// 2: [Increase-mountain-heights module]:  This curve module applies a curve
  //    to the output value from the continent-definition group.  This
  //    modified output value is used by a subsequent noise module to add
  //    additional height to the mountains based on the current continent
  //    elevation.  The higher the continent elevation, the higher the
  //    mountains."

	continentsWithMountains_cu := NoCurve new autoRelease.
	continentsWithMountains_cu
		setSourceModuleIndex: 0 sourceModule: continentDef;
		addControlPointInputValue:                   -1.0 outputValue: -0.0625;
		addControlPointInputValue:                    0.0 outputValue: 0.0;
		addControlPointInputValue: (1.0 - MOUNTAINS_AMOUNT) outputValue: 0.0625;
		addControlPointInputValue:                    1.0 outputValue:  0.25
]

{ #category : 'building - final - mountains' }
NoPlanetExample >> buildContinentsWithMountainsDefinition [
	"// 5: [Continents-with-mountains subgroup]: Caches the output value from
  //    the select-high-elevations module."
	
	continentsWithMountains := NoCache new autoRelease.
	continentsWithMountains
		setSourceModuleIndex: 0 sourceModule: continentsWithMountains_se
]

{ #category : 'building - final - mountains' }
NoPlanetExample >> buildContinentsWithMountainsSelect [
	"// 4: [Select-high-elevations module]: This selector module ensures that
  //    mountains only appear at higher elevations.  It does this by selecting
  //    the output value from the continent-with-mountains module if the
  //    corresponding output value from the terrain-type-defintion group is
  //    above a certain value.  Otherwise, it selects the output value from
  //    the continents-with-hills subgroup.  Note that the continents-with-
  //    hills subgroup also contains the plains terrain."

	continentsWithMountains_se := NoSelect new autoRelease.
	continentsWithMountains_se
		setSourceModuleIndex: 0 sourceModule: continentsWithHills;
		setSourceModuleIndex: 1 sourceModule: continentsWithMountains_ad1;
		setControlModule: terrainTypeDef;
		setBoundsLowerBound: (1.0 - MOUNTAINS_AMOUNT) upperBound: (1001.0 - MOUNTAINS_AMOUNT);
		setEdgeFalloff: 0.25
]

{ #category : 'building - final - plains' }
NoPlanetExample >> buildContinentsWithPlains [

	self buildContinentsWithPlainsAdd.
	self buildContinentsWithPlainsDefinition
]

{ #category : 'building - final - plains' }
NoPlanetExample >> buildContinentsWithPlainsAdd [
	" // 1: [Continents-with-plains module]:  This addition module adds the
  //    scaled-plains-terrain group to the base-continent-elevation subgroup."

	continentsWithPlains_ad := NoAdd new autoRelease.
	continentsWithPlains_ad
		setSourceModuleIndex: 0 sourceModule: baseContinentElev;
		setSourceModuleIndex: 1 sourceModule: scaledPlainsTerrain
]

{ #category : 'building - final - plains' }
NoPlanetExample >> buildContinentsWithPlainsDefinition [
	"// 2: [Continents-with-plains subgroup]: Caches the output value from the
  //    continents-with-plains module."
	
	continentsWithPlains := NoCache new autoRelease.
	continentsWithPlains 
		setSourceModuleIndex: 0 sourceModule: continentsWithPlains_ad
]

{ #category : 'building - final - rivers' }
NoPlanetExample >> buildContinentsWithRivers [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: continents with rivers (4 noise modules)
  //
  // This subgroup applies the river-positions group to the continents-with-
  // badlands subgroup.
  //
  // The output value from this module subgroup is measured in planetary
  // elevation units (-1.0 for the lowest underwater trenches and +1.0 for the
  // highest mountain peaks.)
  //"

	self buildContinentsWithRiversScale.
	self buildContinentsWithRiversAdd.
	self buildContinentsWithRiversSelect.
	self buildContinentsWithRiversDefinition
	
]

{ #category : 'building - final - rivers' }
NoPlanetExample >> buildContinentsWithRiversAdd [
	" // 2: [Add-rivers-to-continents module]: This addition module adds the
  //    rivers to the continents-with-badlands subgroup.  Because the scaled-
  //    rivers module only outputs a negative value, the scaled-rivers module
  //    carves the rivers out of the terrain."

	continentsWithRivers_ad := NoAdd new autoRelease.
	continentsWithRivers_ad
		setSourceModuleIndex: 0 sourceModule: continentsWithBadlands;
		setSourceModuleIndex: 1 sourceModule: continentsWithRivers_sb
]

{ #category : 'building - final - rivers' }
NoPlanetExample >> buildContinentsWithRiversDefinition [
	"// 4: [Continents-with-rivers subgroup]: Caches the output value from the
  //    blended-rivers-to-continents module."
 
	continentsWithRivers := NoCache new autoRelease.
	continentsWithRivers
		setSourceModuleIndex: 0 sourceModule: continentsWithRivers_se
]

{ #category : 'building - final - rivers' }
NoPlanetExample >> buildContinentsWithRiversScale [
	"// 1: [Scaled-rivers module]: This scale/bias module scales the output value
  //    from the river-positions group so that it is measured in planetary
  //    elevation units and is negative; this is required for step 2."

	continentsWithRivers_sb := NoScaleBias new autoRelease.
	continentsWithRivers_sb
		setSourceModuleIndex: 0  sourceModule: riverPositions;
		setScale: RIVER_DEPTH / 2.0;
		setBias: RIVER_DEPTH negated / 2.0
]

{ #category : 'building - final - rivers' }
NoPlanetExample >> buildContinentsWithRiversSelect [
	"// 3: [Blended-rivers-to-continents module]: This selector module outputs
  //    deep rivers near sea level and shallower rivers in higher terrain.  It
  //    does this by selecting the output value from the continents-with-
  //    badlands subgroup if the corresponding output value from the
  //    continents-with-badlands subgroup is far from sea level.  Otherwise,
  //    this selector module selects the output value from the add-rivers-to-
  //    continents module."

	continentsWithRivers_se := NoSelect new autoRelease.
	continentsWithRivers_se
		setSourceModuleIndex: 0 sourceModule: continentsWithBadlands;
		setSourceModuleIndex: 1 sourceModule: continentsWithRivers_ad;
		setControlModule: continentsWithBadlands;
		setBoundsLowerBound: SEA_LEVEL upperBound: (CONTINENT_HEIGHT_SCALE + SEA_LEVEL);
		setEdgeFalloff: CONTINENT_HEIGHT_SCALE - SEA_LEVEL
]

{ #category : 'building - final' }
NoPlanetExample >> buildFinal [

	self buildContinentalShelf.
	self buildContinentalElevations.
	self buildContinentsWithPlains.
	self buildContinentsWithHills.
	self buildContinentsWithMountains.
	self buildContinentsWithBadlands.
	self buildContinentsWithRivers.
	self buildFinalPlanet
]

{ #category : 'building - final - planet' }
NoPlanetExample >> buildFinalPlanet [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: final planet (2 noise modules)
  //
  // This subgroup scales the output value from the unscaled-final-planet
  // subgroup so that it represents an elevation in meters.
  //"
	
	
	"///////////////////////////////////////////////////////////////////////////
  // Module subgroup: unscaled final planet (1 noise module)
  //
  // This subgroup simply caches the output value from the continent-with-
  // rivers subgroup to contribute to the final output value.
  //"
	self buildFinalUnscaled.
	
	self buildFinalPlanetScale.
	self buildFinalPlanetDefinition
]

{ #category : 'building - final - planet' }
NoPlanetExample >> buildFinalPlanetDefinition [
	"// 2: [Final-planet group]: Caches the output value from the final-planet-
  //    in-meters module.  Stick a fork in it, we're done!"

	finalPlanet := NoCache new autoRelease.
	finalPlanet
		setSourceModuleIndex: 0 sourceModule: finalPlanet_sb
]

{ #category : 'building - final - planet' }
NoPlanetExample >> buildFinalPlanetScale [
	"// 1: [Final-planet-in-meters module]: This scale/bias module scales the
  //    output value from the unscaled-final-planet subgroup so that its
  //    output value is measured in meters."

	finalPlanet_sb := NoScaleBias new autoRelease.
	finalPlanet_sb
		setSourceModuleIndex: 0 sourceModule: unscaledFinalPlanet;
		setScale: (MAX_ELEV - MIN_ELEV) / 2.0;
		setBias: (MIN_ELEV + ((MAX_ELEV - MIN_ELEV) / 2.0))
]

{ #category : 'building - final - planet' }
NoPlanetExample >> buildFinalUnscaled [
	"// 1: [Unscaled-final-planet subgroup]: Caches the output value from the
  //    continent-with-rivers subgroup."

	unscaledFinalPlanet := NoCache new autoRelease.
	unscaledFinalPlanet 
		setSourceModuleIndex: 0 sourceModule: continentsWithRivers
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildHighMountainTerrain [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: high mountainous terrain (5 noise modules)
  //
  // This subgroup generates the mountainous terrain that appears at high
  // elevations within the mountain ridges.
  //
  // -1.0 represents the lowest elevations and +1.0 represents the highest
  // elevations.
  //"

	self buildHighMountainTerrainRidges0.
	self buildHighMountainTerrainRidges1.
	self buildHighMountainTerrainMax.
	self buildHighMountainTerrainTurbulence.
	self buildHighMountainTerrainDefinition
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildHighMountainTerrainDefinition [
	"// 5: [High-mountainous-terrain subgroup]: Caches the output value from the
  //    warped-high-mountains module."

	mountainousHigh := NoCache new autoRelease.
	mountainousHigh
		setSourceModuleIndex: 0 sourceModule: mountainousHigh_tu
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildHighMountainTerrainMax [
	"// 3: [High-mountains module]: Next, a maximum-value module causes more
  //    mountains to appear at the expense of valleys.  It does this by
  //    ensuring that only the maximum of the output values from the two
  //    ridged-multifractal-noise modules contribute to the output value of
  //    this subgroup."

	mountainousHigh_ma := NoMax new autoRelease. 
	mountainousHigh_ma 
		setSourceModuleIndex: 0 sourceModule: mountainousHigh_rm0;
		setSourceModuleIndex: 1 sourceModule: mountainousHigh_rm1
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildHighMountainTerrainRidges0 [
	"// 1: [Mountain-basis-0 module]: This ridged-multifractal-noise module,
  //    along with the mountain-basis-1 module, generates the individual
  //    mountains."
	
	mountainousHigh_rm0 := NoRidgedMulti new autoRelease.
	mountainousHigh_rm0
		setSeed: CUR_SEED + 40;
		setFrequency: 2371.0;
		setLacunarity: MOUNTAIN_LACUNARITY;
		setOctaveCount: 3;
		setNoiseQuality: NoNoiseQuality QUALITY_BEST
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildHighMountainTerrainRidges1 [
	"// 2: [Mountain-basis-1 module]: This ridged-multifractal-noise module,
  //    along with the mountain-basis-0 module, generates the individual
  //    mountains."

	mountainousHigh_rm1 := NoRidgedMulti new autoRelease.
	mountainousHigh_rm1
		setSeed: CUR_SEED + 41;
		setFrequency: 2341.0;
		setLacunarity: MOUNTAIN_LACUNARITY;
		setOctaveCount: 3;
		setNoiseQuality: NoNoiseQuality QUALITY_BEST
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildHighMountainTerrainTurbulence [
	"// 4: [Warped-high-mountains module]: This turbulence module warps the
  //    output value from the high-mountains module, adding some detail to it."

	mountainousHigh_tu := NoTurbulence new autoRelease.
	mountainousHigh_tu
		setSourceModuleIndex: 0 sourceModule: mountainousHigh_ma;
		setSeed: CUR_SEED + 42;
		setFrequency: 31511.0;
		setPower: (1.0 / 180371.0) * MOUNTAINS_TWIST;
		setRoughness: 4
]

{ #category : 'building - terrain - hilly' }
NoPlanetExample >> buildHillyTerrain [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: hilly terrain (11 noise modules)
  //
  // This subgroup generates the hilly terrain.
  //
  // -1.0 represents the lowest elevations and +1.0 represents the highest
  // elevations.
  //"

	self buildHillyTerrainBillow.
	self buildHillyTerrainScale0.
	self buildHillyTerrainRidges.
	self buildHillyTerrainScale1.
	self buildHillyTerrainLow.
	self buildHillyTerrainBlend.
	self buildHillyTerrainScale2.
	self buildHillyTerrainExponent.
	self buildHillyTerrainTurbulence0.
	self buildHillyTerrainTurbulence1.
	self buildHillyTerrainDefinition
]

{ #category : 'building - terrain - hilly' }
NoPlanetExample >> buildHillyTerrainBillow [
	"// 1: [Hills module]: This billow-noise module generates the hills."
	
	hillyTerrain_bi := NoBillow new autoRelease.
	hillyTerrain_bi
		setSeed: CUR_SEED + 60;
		setFrequency: 1663.0;
		setPersistence: 0.5;
		setLacunarity: HILLS_LACUNARITY;
		setOctaveCount: 6;
		setNoiseQuality: NoNoiseQuality QUALITY_BEST
]

{ #category : 'building - terrain - hilly' }
NoPlanetExample >> buildHillyTerrainBlend [
	"// 6: [Mountains-and-valleys module]: This blender module merges the
  //    scaled-hills module and the scaled-river-valley module together.  It
  //    causes the low-lying areas of the terrain to become smooth, and causes
  //    the high-lying areas of the terrain to contain hills.  To do this, it
  //    uses the scaled-hills module as the control module, causing the low-
  //    flat module to appear in the lower areas and causing the scaled-river-
  //    valley module to appear in the higher areas."

	hillyTerrain_bl := NoBlend new autoRelease.
	hillyTerrain_bl
		setSourceModuleIndex: 0 sourceModule: hillyTerrain_co;
		setSourceModuleIndex: 1 sourceModule: hillyTerrain_sb1;
		setControlModule: hillyTerrain_sb0
]

{ #category : 'building - terrain - hilly' }
NoPlanetExample >> buildHillyTerrainDefinition [
	"// 11: [Hilly-terrain group]: Caches the output value from the warped-hilly-
  //     terrain module.  This is the output value for the entire hilly-
  //     terrain group."

	hillyTerrain := NoCache new autoRelease.
	hillyTerrain 
		setSourceModuleIndex: 0 sourceModule: hillyTerrain_tu1
]

{ #category : 'building - terrain - hilly' }
NoPlanetExample >> buildHillyTerrainExponent [
	"// 8: [Increased-slope-hilly-terrain module]: To increase the hill slopes at
  //    higher elevations, this exponential-curve module applies an
  //    exponential curve to the output value the scaled-hills-and-valleys
  //    module.  This exponential-curve module expects the input value to
  //    range from -1.0 to 1.0."
	
	hillyTerrain_ex := NoExponent new autoRelease.
	hillyTerrain_ex 
		setSourceModuleIndex: 0  sourceModule: hillyTerrain_sb2;
		setExponent: 1.375
]

{ #category : 'building - terrain - hilly' }
NoPlanetExample >> buildHillyTerrainLow [
	"// 5: [Low-flat module]: This low constant value is used by step 6."
	
	hillyTerrain_co := NoConst new autoRelease.
	hillyTerrain_co 
		setConstValue: -1.0
]

{ #category : 'building - terrain - hilly' }
NoPlanetExample >> buildHillyTerrainRidges [
	"// 3: [River-valley module]: This ridged-multifractal-noise module generates
  //    the river valleys.  It has a much lower frequency so that more hills
  //    will appear in between the valleys.  Note that this noise module
  //    generates ridged-multifractal noise using only one octave; this
  //    information will be important in the next step."

	hillyTerrain_rm := NoRidgedMulti new autoRelease.
	hillyTerrain_rm
		setSeed: CUR_SEED + 61;
		setFrequency: 367.5;
		setLacunarity: HILLS_LACUNARITY;
		setNoiseQuality: NoNoiseQuality QUALITY_BEST;
		setOctaveCount: 1
]

{ #category : 'building - terrain - hilly' }
NoPlanetExample >> buildHillyTerrainScale0 [
	"// 2: [Scaled-hills module]: Next, a scale/bias module scales the output
  //    value from the hills module so that its hilltops are not too high.
  //    The reason for this is that these hills are eventually added to the
  //    river valleys (see below.)"

	hillyTerrain_sb0 := NoScaleBias new autoRelease.
	hillyTerrain_sb0
		setSourceModuleIndex: 0 sourceModule: hillyTerrain_bi;
		setScale: 0.5;
		setBias: 0.5
]

{ #category : 'building - terrain - hilly' }
NoPlanetExample >> buildHillyTerrainScale1 [
	"// 4: [Scaled-river-valley module]: Next, a scale/bias module applies a
  //    scaling factor of -2.0 to the output value from the river-valley
  //    module.  This stretches the possible elevation values because one-
  //    octave ridged-multifractal noise has a lower range of output values
  //    than multiple-octave ridged-multifractal noise.  The negative scaling
  //    factor inverts the range of the output value, turning the ridges from
  //    the river-valley module into valleys."

	hillyTerrain_sb1 := NoScaleBias new autoRelease.
	hillyTerrain_sb1
		setSourceModuleIndex: 0 sourceModule: hillyTerrain_rm;
		setScale: -2.0;
		setBias: -0.5
]

{ #category : 'building - terrain - hilly' }
NoPlanetExample >> buildHillyTerrainScale2 [
	"// 7: [Scaled-hills-and-valleys module]: This scale/bias module slightly
  //    reduces the range of the output value from the hills-and-valleys
  //    module, decreasing the heights of the hilltops."

	hillyTerrain_sb2 := NoScaleBias new autoRelease.
	hillyTerrain_sb2
		setSourceModuleIndex: 0 sourceModule: hillyTerrain_bl;
		setScale: 0.75;
		setBias: -0.25
]

{ #category : 'building - terrain - hilly' }
NoPlanetExample >> buildHillyTerrainTurbulence0 [
	"// 9: [Coarse-turbulence module]: This turbulence module warps the output
  //    value from the increased-slope-hilly-terrain module, adding some
  //    coarse detail to it."

	hillyTerrain_tu0 := NoTurbulence new autoRelease.
	hillyTerrain_tu0
		setSourceModuleIndex: 0 sourceModule: hillyTerrain_ex;
		setSeed: CUR_SEED + 62;
		setFrequency: 1531.0;
		setPower: (1.0 / 16921.0) * HILLS_TWIST;
		setRoughness: 4
]

{ #category : 'building - terrain - hilly' }
NoPlanetExample >> buildHillyTerrainTurbulence1 [
	"// 10: [Warped-hilly-terrain module]: This turbulence module warps the
  //     output value from the coarse-turbulence module.  This turbulence has
  //     a higher frequency, but lower power, than the coarse-turbulence
  //     module, adding some fine detail to it."
 
	hillyTerrain_tu1 := NoTurbulence new autoRelease.
	hillyTerrain_tu1
		setSourceModuleIndex: 0 sourceModule: hillyTerrain_tu0;
		setSeed: CUR_SEED + 63;
		setFrequency: 21617.0;
		setPower: (1.0 / 117529.0) * HILLS_TWIST;
		setRoughness: 6
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildLowMountainTerrain [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: low mountainous terrain (4 noise modules)
  //
  // This subgroup generates the mountainous terrain that appears at low
  // elevations within the river valleys.
  //
  // -1.0 represents the lowest elevations and +1.0 represents the highest
  // elevations.
  //"

	self buildLowMountainTerrainRidges0.
	self buildLowMountainTerrainRidges1.
	self buildLowMountainTerrainMultiply.
	self buildLowMountainTerrainDefinition
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildLowMountainTerrainDefinition [
	"// 4: [Low-mountainous-terrain subgroup]: Caches the output value from the
  //    low-moutainous-terrain module."
	
	mountainousLow := NoCache new autoRelease.
	mountainousLow
		setSourceModuleIndex: 0 sourceModule: mountainousLow_mu
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildLowMountainTerrainMultiply [
	"// 3: [Low-mountainous-terrain module]: This multiplication module combines
  //    the output values from the two ridged-multifractal-noise modules.
  //    This causes the following to appear in the resulting terrain:
  //    - Cracks appear when two negative output values are multiplied
  //      together.
  //    - Flat areas appear when a positive and a negative output value are
  //      multiplied together.
  //    - Ridges appear when two positive output values are multiplied
  //      together."

	mountainousLow_mu := NoMultiply new autoRelease.
	mountainousLow_mu 
		setSourceModuleIndex: 0 sourceModule: mountainousLow_rm0;
		setSourceModuleIndex: 1 sourceModule: mountainousLow_rm1
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildLowMountainTerrainRidges0 [
	"// 1: [Lowland-basis-0 module]: This ridged-multifractal-noise module,
  //    along with the lowland-basis-1 module, produces the low mountainous
  //    terrain."

	mountainousLow_rm0 := NoRidgedMulti new autoRelease.
	mountainousLow_rm0
		setSeed: CUR_SEED + 50;
		setFrequency: 1381.0;
		setLacunarity: MOUNTAIN_LACUNARITY;
		setOctaveCount: 8;
		setNoiseQuality: NoNoiseQuality QUALITY_BEST
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildLowMountainTerrainRidges1 [
	"// 1: [Lowland-basis-1 module]: This ridged-multifractal-noise module,
  //    along with the lowland-basis-0 module, produces the low mountainous
  //    terrain."

	mountainousLow_rm1 := NoRidgedMulti new autoRelease.
	mountainousLow_rm1
		setSeed: CUR_SEED + 51;
		setFrequency: 1427.0;
		setLacunarity: MOUNTAIN_LACUNARITY;
		setOctaveCount: 8;
		setNoiseQuality: NoNoiseQuality QUALITY_BEST
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildMountainTerrain [

	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: mountain base definition (9 noise modules)
  //
  // This subgroup generates the base-mountain elevations.  Other subgroups
  // will add the ridges and low areas to the base elevations.
  //
  // -1.0 represents low mountainous terrain and +1.0 represents high
  // mountainous terrain.
  //"

	self buildBaseMountainTerrain.
	self buildHighMountainTerrain.
	self buildLowMountainTerrain.
	
	" ////////////////////////////////////////////////////////////////////////////
  // Module subgroup: mountainous terrain (7 noise modules)
  //
  // This subgroup generates the final mountainous terrain by combining the
  // high-mountainous-terrain subgroup with the low-mountainous-terrain
  // subgroup.
  //
  // -1.0 represents the lowest elevations and +1.0 represents the highest
  // elevations.
  //"
	self buildMountainTerrainScale0.
	self buildMountainTerrainScale1.
	self buildMountainTerrainAdd.
	self buildMountainTerrainSelect.
	self buildMountainTerrainScale2.
	self buildMountainTerrainExponent.
	self buildMountainTerrainDefinition
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildMountainTerrainAdd [
	"// 3: [Added-high-mountainous-terrain module]: This addition module adds the
  //    output value from the scaled-high-mountainous-terrain module to the
  //    output value from the mountain-base-definition subgroup.  Mountains
  //    now appear all over the terrain."

	mountainousTerrain_ad := NoAdd new autoRelease.
	mountainousTerrain_ad
		setSourceModuleIndex: 0 sourceModule: mountainousTerrain_sb1;
		setSourceModuleIndex: 1 sourceModule: mountainBaseDef
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildMountainTerrainDefinition [
	"// 7: [Mountainous-terrain group]: Caches the output value from the
  //    glaciated-mountainous-terrain module.  This is the output value for
  //    the entire mountainous-terrain group."

	mountainousTerrain := NoCache new autoRelease. 
	mountainousTerrain
		setSourceModuleIndex: 0 sourceModule: mountainousTerrain_ex
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildMountainTerrainExponent [
	"// 6: [Glaciated-mountainous-terrain-module]: This exponential-curve module
  //    applies an exponential curve to the output value from the scaled-
  //    mountainous-terrain module.  This causes the slope of the mountains to
  //    smoothly increase towards higher elevations, as if a glacier grinded
  //    out those mountains.  This exponential-curve module expects the output
  //    value to range from -1.0 to +1.0."

	mountainousTerrain_ex := NoExponent new autoRelease.
	mountainousTerrain_ex
		setSourceModuleIndex: 0 sourceModule: mountainousTerrain_sb2;
		setExponent: MOUNTAIN_GLACIATION
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildMountainTerrainScale0 [
	"// 1: [Scaled-low-mountainous-terrain module]: First, this scale/bias module
  //    scales the output value from the low-mountainous-terrain subgroup to a
  //    very low value and biases it towards -1.0.  This results in the low
  //    mountainous areas becoming more-or-less flat with little variation.
  //    This will also result in the low mountainous areas appearing at the
  //    lowest elevations in this subgroup."

	mountainousTerrain_sb0 := NoScaleBias new autoRelease.
	mountainousTerrain_sb0
		setSourceModuleIndex: 0 sourceModule: mountainousLow;
		setScale: 0.03125;
		setBias: -0.96875
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildMountainTerrainScale1 [
	"// 2: [Scaled-high-mountainous-terrain module]: Next, this scale/bias module
  //    scales the output value from the high-mountainous-terrain subgroup to
  //    1/4 of its initial value and biases it so that its output value is
  //    usually positive."

	mountainousTerrain_sb1 := NoScaleBias new autoRelease.
	mountainousTerrain_sb1
		setSourceModuleIndex: 0 sourceModule: mountainousHigh;
		setScale: 0.25;
		setBias: 0.25
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildMountainTerrainScale2 [
	"// 5: [Scaled-mountainous-terrain-module]: This scale/bias module slightly
  //    reduces the range of the output value from the combined-mountainous-
  //    terrain module, decreasing the heights of the mountain peaks."
 
	mountainousTerrain_sb2 := NoScaleBias new autoRelease.
	mountainousTerrain_sb2
		setSourceModuleIndex: 0 sourceModule: mountainousTerrain_se;
		setScale: 0.8;
		setBias: 0.0
]

{ #category : 'building - terrain - mountain' }
NoPlanetExample >> buildMountainTerrainSelect [
	"// 4: [Combined-mountainous-terrain module]: Note that at this point, the
  //    entire terrain is covered in high mountainous terrain, even at the low
  //    elevations.  To make sure the mountains only appear at the higher
  //    elevations, this selector module causes low mountainous terrain to
  //    appear at the low elevations (within the valleys) and the high
  //    mountainous terrain to appear at the high elevations (within the
  //    ridges.)  To do this, this noise module selects the output value from
  //    the added-high-mountainous-terrain module if the output value from the
  //    mountain-base-definition subgroup is higher than a set amount.
  //    Otherwise, this noise module selects the output value from the scaled-
  //    low-mountainous-terrain module."
 
	mountainousTerrain_se := NoSelect new autoRelease.
	mountainousTerrain_se
		setSourceModuleIndex: 0 sourceModule: mountainousTerrain_sb0;
		setSourceModuleIndex: 1 sourceModule: mountainousTerrain_ad;
		setControlModule: mountainBaseDef;
		setBoundsLowerBound: -0.5 upperBound: 999.5;
		setEdgeFalloff: 0.5
]

{ #category : 'building - terrain - plains' }
NoPlanetExample >> buildPlainsTerrain [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: plains terrain (7 noise modules)
  //
  // This subgroup generates the plains terrain.
  //
  // Because this subgroup will eventually be flattened considerably, the
  // types and combinations of noise modules that generate the plains are not
  // really that important; they only need to ""look"" interesting.
  //
  // -1.0 represents the lowest elevations and +1.0 represents the highest
  // elevations.
  //"
	
	self buildPlainsTerrainBillow0.
	self buildPlainsTerrainScale0.
	self buildPlainsTerrainBillow1.
	self buildPlainsTerrainScale1.
	self buildPlainsTerrainMultiply.
	self buildPlainsTerrainScale2.
	self buildPlainsTerrainDefinition
]

{ #category : 'building - terrain - plains' }
NoPlanetExample >> buildPlainsTerrainBillow0 [
	"// 1: [Plains-basis-0 module]: This billow-noise module, along with the
  //    plains-basis-1 module, produces the plains."

	plainsTerrain_bi0 := NoBillow new autoRelease.
	plainsTerrain_bi0
		setSeed: CUR_SEED + 70;
		setFrequency: 1097.5;
		setPersistence: 0.5;
		setLacunarity: PLAINS_LACUNARITY;
		setOctaveCount: 8;
		setNoiseQuality: NoNoiseQuality QUALITY_BEST
]

{ #category : 'building - terrain - plains' }
NoPlanetExample >> buildPlainsTerrainBillow1 [
	"// 3: [Plains-basis-1 module]: This billow-noise module, along with the
  //    plains-basis-2 module, produces the plains."

	plainsTerrain_bi1 := NoBillow new autoRelease.
	plainsTerrain_bi1
		setSeed: CUR_SEED + 71;
		setFrequency: 1319.5;
		setPersistence: 0.5;
		setLacunarity: PLAINS_LACUNARITY;
		setOctaveCount: 8;
		setNoiseQuality: NoNoiseQuality QUALITY_BEST
]

{ #category : 'building - terrain - plains' }
NoPlanetExample >> buildPlainsTerrainDefinition [
	"// 7: [Plains-terrain group]: Caches the output value from the rescaled-
  //    plains-basis module.  This is the output value for the entire plains-
  //    terrain group."

	plainsTerrain := NoCache new autoRelease.
	plainsTerrain
		setSourceModuleIndex: 0 sourceModule: plainsTerrain_sb2
]

{ #category : 'building - terrain - plains' }
NoPlanetExample >> buildPlainsTerrainMultiply [
	"// 5: [Combined-plains-basis module]: This multiplication module combines
  //    the two plains basis modules together."

	plainsTerrain_mu := NoMultiply new autoRelease.
	plainsTerrain_mu
		setSourceModuleIndex: 0 sourceModule: plainsTerrain_sb0;
		setSourceModuleIndex: 1 sourceModule: plainsTerrain_sb1
]

{ #category : 'building - terrain - plains' }
NoPlanetExample >> buildPlainsTerrainScale0 [
	"// 2: [Positive-plains-basis-0 module]: This scale/bias module makes the
  //    output value from the plains-basis-0 module positive since this output
  //    value will be multiplied together with the positive-plains-basis-1
  //    module."

	plainsTerrain_sb0 := NoScaleBias new autoRelease.
	plainsTerrain_sb0 
		setSourceModuleIndex: 0 sourceModule: plainsTerrain_bi0;
		setScale: 0.5;
		setBias: 0.5
]

{ #category : 'building - terrain - plains' }
NoPlanetExample >> buildPlainsTerrainScale1 [
	"// 4: [Positive-plains-basis-1 module]: This scale/bias module makes the
  //    output value from the plains-basis-1 module positive since this output
  //    value will be multiplied together with the positive-plains-basis-0
  //    module."

	plainsTerrain_sb1 := NoScaleBias new autoRelease.
	plainsTerrain_sb1
		setSourceModuleIndex: 0 sourceModule: plainsTerrain_bi1;
		setScale: 0.5;
		setBias: 0.5
]

{ #category : 'building - terrain - plains' }
NoPlanetExample >> buildPlainsTerrainScale2 [
	"// 6: [Rescaled-plains-basis module]: This scale/bias module maps the output
  //    value that ranges from 0.0 to 1.0 back to a value that ranges from
  //    -1.0 to +1.0."

	plainsTerrain_sb2 := NoScaleBias new autoRelease.
	plainsTerrain_sb2
		setSourceModuleIndex: 0 sourceModule: plainsTerrain_mu;
		setScale: 2.0;
		setBias: -1.0
]

{ #category : 'building - rivers' }
NoPlanetExample >> buildRiverPositions [
	" ////////////////////////////////////////////////////////////////////////////
  // Module subgroup: river positions (7 noise modules)
  //
  // This subgroup generates the river positions.
  //
  // -1.0 represents the lowest elevations and +1.0 represents the highest
  // elevations.
  //"

	self buildRiverPositionsRidge0.
	self buildRiverPositionsCurve0.
	self buildRiverPositionsRidge1.
	self buildRiverPositionsCurve1.
	self buildRiverPositionsMin.
	self buildRiverPositionsTurbulence.
	self buildRiverPositionsDefinition
]

{ #category : 'building - rivers' }
NoPlanetExample >> buildRiverPositionsCurve0 [
	"// 2: [Large-river-curve module]: This curve module applies a curve to the
  //    output value from the large-river-basis module so that the ridges
  //    become inverted.  This creates the rivers.  This curve also compresses
  //    the edge of the rivers, producing a sharp transition from the land to
  //    the river bottom."

	riverPositions_cu0 := NoCurve new autoRelease.
	riverPositions_cu0
		setSourceModuleIndex: 0 sourceModule: riverPositions_rm0;
		addControlPointInputValue: -2.000 outputValue:  2.000;
		addControlPointInputValue: -1.000 outputValue:  1.000;
		addControlPointInputValue: -0.125 outputValue:  0.875;
		addControlPointInputValue:  0.000 outputValue: -1.000;
		addControlPointInputValue:  1.000 outputValue: -1.500;
		addControlPointInputValue:  2.000 outputValue: -2.000
]

{ #category : 'building - rivers' }
NoPlanetExample >> buildRiverPositionsCurve1 [
	"// 4: [Small-river-curve module]: This curve module applies a curve to the
  //    output value from the small-river-basis module so that the ridges
  //    become inverted.  This creates the rivers.  This curve also compresses
  //    the edge of the rivers, producing a sharp transition from the land to
  //    the river bottom."

	riverPositions_cu1 := NoCurve new autoRelease.
	riverPositions_cu1
		setSourceModuleIndex: 0 sourceModule: riverPositions_rm1;
		addControlPointInputValue: -2.000 outputValue: 2.0000;
		addControlPointInputValue: -1.000 outputValue: 1.5000;
		addControlPointInputValue: -0.125 outputValue: 1.4375;
		addControlPointInputValue:  0.000 outputValue: 0.5000;
		addControlPointInputValue:  1.000 outputValue: 0.2500;
		addControlPointInputValue:  2.000 outputValue: 0.0000
]

{ #category : 'building - rivers' }
NoPlanetExample >> buildRiverPositionsDefinition [
	"// 7: [River-positions group]: Caches the output value from the warped-
  //    rivers module.  This is the output value for the entire river-
  //    positions group."

	riverPositions := NoCache new autoRelease.
	riverPositions
		setSourceModuleIndex: 0 sourceModule: riverPositions_tu
]

{ #category : 'building - rivers' }
NoPlanetExample >> buildRiverPositionsMin [
	"// 5: [Combined-rivers module]: This minimum-value module causes the small
  //    rivers to cut into the large rivers.  It does this by selecting the
  //    minimum output values from the large-river-curve module and the small-
  //    river-curve module."

	riverPositions_mi := NoMin new autoRelease.
	riverPositions_mi
		setSourceModuleIndex: 0 sourceModule: riverPositions_cu0;
		setSourceModuleIndex: 1 sourceModule: riverPositions_cu1
]

{ #category : 'building - rivers' }
NoPlanetExample >> buildRiverPositionsRidge0 [
	"// 1: [Large-river-basis module]: This ridged-multifractal-noise module
  //    creates the large, deep rivers."

	riverPositions_rm0 := NoRidgedMulti new autoRelease.
	riverPositions_rm0
		setSeed: CUR_SEED + 100;
		setFrequency: 18.75;
		setLacunarity: CONTINENT_LACUNARITY;
		setOctaveCount: 1;
		setNoiseQuality: NoNoiseQuality QUALITY_BEST
]

{ #category : 'building - rivers' }
NoPlanetExample >> buildRiverPositionsRidge1 [
	"/// 3: [Small-river-basis module]: This ridged-multifractal-noise module
  //     creates the small, shallow rivers."

	riverPositions_rm1 := NoRidgedMulti new autoRelease.
	riverPositions_rm1
		setSeed: CUR_SEED + 101;
		setFrequency: 43.25;
		setLacunarity: CONTINENT_LACUNARITY;
		setOctaveCount: 1;
		setNoiseQuality: NoNoiseQuality QUALITY_BEST
]

{ #category : 'building - rivers' }
NoPlanetExample >> buildRiverPositionsTurbulence [
	"// 6: [Warped-rivers module]: This turbulence module warps the output value
  //    from the combined-rivers module, which twists the rivers.  The high
  //    roughness produces less-smooth rivers."

	riverPositions_tu := NoTurbulence new autoRelease.
	riverPositions_tu
		setSourceModuleIndex: 0 sourceModule: riverPositions_mi;
		setSeed: CUR_SEED + 102;
		setFrequency: 9.25;
		setPower: 1.0 / 57.75;
		setRoughness: 6
]

{ #category : 'building - rivers' }
NoPlanetExample >> buildRivers [

	self buildRiverPositions
]

{ #category : 'building - scaled' }
NoPlanetExample >> buildScaled [

	self buildScaledMountainTerrain.
	self buildScaledHillyTerrain.
	self buildScaledPlainsTerrain.
	self buildScaledBadlandsTerrain
]

{ #category : 'building - scaled - badlands' }
NoPlanetExample >> buildScaledBadlandsTerrain [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: scaled badlands terrain (2 noise modules)
  //
  // This subgroup scales the output value from the badlands-terrain group so
  // that it can be added to the elevations defined by the continent-
  // definition group.
  //
  // This subgroup scales the output value such that it is almost always
  // positive.  This is done so that negative elevations are not applied to
  // the continent-definition group, preventing parts of the continent-
  // definition group from having negative terrain features ""stamped"" into it.
  //
  // The output value from this module subgroup is measured in planetary
  // elevation units (-1.0 for the lowest underwater trenches and +1.0 for the
  // highest mountain peaks.)
  //"

	self buildScaledBadlandsTerrainScale.
	self buildScaledBadlandsTerrainDefinition
]

{ #category : 'building - scaled - badlands' }
NoPlanetExample >> buildScaledBadlandsTerrainDefinition [
	"// 2: [Scaled-badlands-terrain group]: Caches the output value from the
  //    scaled-badlands-terrain module.  This is the output value for the
  //    entire scaled-badlands-terrain group."

	scaledBadlandsTerrain := NoCache new autoRelease.
 	scaledBadlandsTerrain 
		setSourceModuleIndex: 0 sourceModule: scaledBadlandsTerrain_sb
]

{ #category : 'building - scaled - badlands' }
NoPlanetExample >> buildScaledBadlandsTerrainScale [
	"// 1: [Scaled-badlands-terrain module]: This scale/bias module scales the
  //    output value from the badlands-terrain group so that it is measured
  //    in planetary elevation units"

	scaledBadlandsTerrain_sb := NoScaleBias new autoRelease.
	scaledBadlandsTerrain_sb
		setSourceModuleIndex: 0 sourceModule: badlandsTerrain;
		setScale: 0.0625;
		setBias: 0.0625
]

{ #category : 'building - scaled - hilly' }
NoPlanetExample >> buildScaledHillyTerrain [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: scaled hilly terrain (6 noise modules)
  //
  // This subgroup scales the output value from the hilly-terrain group so
  // that it can be added to the elevation defined by the continent-
  // definition group.  The scaling amount applied to the hills is one half of
  // the scaling amount applied to the scaled-mountainous-terrain group.
  //
  // This subgroup scales the output value such that it is almost always
  // positive.  This is done so that negative elevations are not applied to
  // the continent-definition group, preventing parts of the continent-
  // definition group from having negative terrain features ""stamped"" into it.
  //
  // The output value from this module subgroup is measured in planetary
  // elevation units (-1.0 for the lowest underwater trenches and +1.0 for the
  // highest mountain peaks.)
  //"

	self buildScaledHillyTerrainScale0.
	self buildScaledHillyTerrainPerlin.
	self buildScaledHillyTerrainExponent.
	self buildScaledHillyTerrainScale1.
	self buildScaledHillyTerrainMultiply.
	self buildScaledHillyTerrainDefinition
]

{ #category : 'building - scaled - hilly' }
NoPlanetExample >> buildScaledHillyTerrainDefinition [
	"// 6: [Scaled-hilly-terrain group]: Caches the output value from the
  //    hilltop-height-multiplier module.  This is the output value for the
  //    entire scaled-hilly-terrain group."

	scaledHillyTerrain := NoCache new autoRelease.
	scaledHillyTerrain
		setSourceModuleIndex: 0 sourceModule: scaledHillyTerrain_mu
]

{ #category : 'building - scaled - hilly' }
NoPlanetExample >> buildScaledHillyTerrainExponent [
	" // 3: [Hilltop-modulation module]: This exponential-curve module applies an
  //    exponential curve to the output value from the base-hilltop-modulation
  //    module.  This produces a small number of high values and a much larger
  //    number of low values.  This means there will be a few hilltops with
  //    much higher elevations than the majority of the hilltops, making the
  //    terrain features more varied."

	scaledHillyTerrain_ex := NoExponent new autoRelease.
	scaledHillyTerrain_ex
		setSourceModuleIndex: 0 sourceModule: scaledHillyTerrain_pe;
		setExponent: 1.25
]

{ #category : 'building - scaled - hilly' }
NoPlanetExample >> buildScaledHillyTerrainMultiply [
	"// 5: [Hilltop-height-multiplier module]: This multiplier module modulates
  //    the heights of the hilltops from the base-scaled-hilly-terrain module
  //    using the output value from the scaled-hilltop-modulation module."

	scaledHillyTerrain_mu := NoMultiply new autoRelease.
	scaledHillyTerrain_mu
		setSourceModuleIndex: 0 sourceModule: scaledHillyTerrain_sb0;
		setSourceModuleIndex: 1  sourceModule: scaledHillyTerrain_sb1
]

{ #category : 'building - scaled - hilly' }
NoPlanetExample >> buildScaledHillyTerrainPerlin [
	"// 2: [Base-hilltop-modulation module]: At this stage, most hilltops have
  //    roughly the same elevation.  This Perlin-noise module generates some
  //    random values that will be used by subsequent noise modules to
  //    randomly change the elevations of the hilltops."

	scaledHillyTerrain_pe := NoPerlin new autoRelease.
	scaledHillyTerrain_pe
		setSeed: CUR_SEED + 120;
		setFrequency: 13.5;
		setPersistence: 0.5;
		setLacunarity: HILLS_LACUNARITY;
		setOctaveCount: 6;
		setNoiseQuality: NoNoiseQuality QUALITY_STD
]

{ #category : 'building - scaled - hilly' }
NoPlanetExample >> buildScaledHillyTerrainScale0 [
	" // 1: [Base-scaled-hilly-terrain module]: This scale/bias module scales the
  //    output value from the hilly-terrain group so that this output value is
  //    measured in planetary elevation units "

	scaledHillyTerrain_sb0 := NoScaleBias new autoRelease.
	scaledHillyTerrain_sb0
		setSourceModuleIndex: 0 sourceModule: hillyTerrain;
		setScale: 0.0625;
		setBias: 0.0625
]

{ #category : 'building - scaled - hilly' }
NoPlanetExample >> buildScaledHillyTerrainScale1 [
	"// 4: [Scaled-hilltop-modulation module]: This scale/bias module modifies
  //    the range of the output value from the hilltop-modulation module so
  //    that it can be used as the modulator for the hilltop-height-multiplier
  //    module.  It is important that this output value is not much lower than
  //    1.0."

	scaledHillyTerrain_sb1 := NoScaleBias new autoRelease.
	scaledHillyTerrain_sb1
		setSourceModuleIndex: 0 sourceModule: scaledHillyTerrain_ex;
		setScale: 0.5;
		setBias: 1.5
]

{ #category : 'building - scaled - mountain' }
NoPlanetExample >> buildScaledMountainTerrain [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: scaled mountainous terrain (6 noise modules)
  //
  // This subgroup scales the output value from the mountainous-terrain group
  // so that it can be added to the elevation defined by the continent-
  // definition group.
  //
  // This subgroup scales the output value such that it is almost always
  // positive.  This is done so that a negative elevation does not get applied
  // to the continent-definition group, preventing parts of that group from
  // having negative terrain features ""stamped"" into it.
  //
  // The output value from this module subgroup is measured in planetary
  // elevation units (-1.0 for the lowest underwater trenches and +1.0 for the
  // highest mountain peaks.)
  //"

	self buildScaledMountainTerrainScale0.
	self buildScaledMountainTerrainPerlin.
	self buildScaledMountainTerrainExponent.
	self buildScaledMountainTerrainScale1.
	self buildScaledMountainTerrainMultiply.
	self buildScaledMountainTerrainDefinition
]

{ #category : 'building - scaled - mountain' }
NoPlanetExample >> buildScaledMountainTerrainDefinition [
	"// 6: [Scaled-mountainous-terrain group]: Caches the output value from the
  //    peak-height-multiplier module.  This is the output value for the
  //    entire scaled-mountainous-terrain group."

	scaledMountainousTerrain := NoCache new autoRelease.
	scaledMountainousTerrain
		setSourceModuleIndex: 0 sourceModule: scaledMountainousTerrain_mu
]

{ #category : 'building - scaled - mountain' }
NoPlanetExample >> buildScaledMountainTerrainExponent [
	"// 3: [Peak-modulation module]: This exponential-curve module applies an
  //    exponential curve to the output value from the base-peak-modulation
  //    module.  This produces a small number of high values and a much larger
  //    number of low values.  This means there will be a few peaks with much
  //    higher elevations than the majority of the peaks, making the terrain
  //    features more varied."

	scaledMountainousTerrain_ex := NoExponent new autoRelease.
	scaledMountainousTerrain_ex
		setSourceModuleIndex: 0 sourceModule: scaledMountainousTerrain_pe;
		setExponent: 1.25
]

{ #category : 'building - scaled - mountain' }
NoPlanetExample >> buildScaledMountainTerrainMultiply [
	"  // 5: [Peak-height-multiplier module]: This multiplier module modulates the
  //    heights of the mountain peaks from the base-scaled-mountainous-terrain
  //    module using the output value from the scaled-peak-modulation module."

	scaledMountainousTerrain_mu := NoMultiply new autoRelease.
	scaledMountainousTerrain_mu 
		setSourceModuleIndex: 0 sourceModule: scaledMountainousTerrain_sb0;
		setSourceModuleIndex: 1 sourceModule: scaledMountainousTerrain_sb1
]

{ #category : 'building - scaled - mountain' }
NoPlanetExample >> buildScaledMountainTerrainPerlin [
	"// 2: [Base-peak-modulation module]: At this stage, most mountain peaks have
  //    roughly the same elevation.  This Perlin-noise module generates some
  //    random values that will be used by subsequent noise modules to
  //    randomly change the elevations of the mountain peaks."

	scaledMountainousTerrain_pe := NoPerlin new autoRelease.
	scaledMountainousTerrain_pe
		setSeed: CUR_SEED + 110;
		setFrequency: 14.5;
		setPersistence: 0.5;
		setLacunarity: MOUNTAIN_LACUNARITY;
		setOctaveCount: 6;
		setNoiseQuality: NoNoiseQuality QUALITY_STD
]

{ #category : 'building - scaled - mountain' }
NoPlanetExample >> buildScaledMountainTerrainScale0 [
	"// 1: [Base-scaled-mountainous-terrain module]: This scale/bias module
  //    scales the output value from the mountainous-terrain group so that the
  //    output value is measured in planetary elevation units."

	scaledMountainousTerrain_sb0 := NoScaleBias new autoRelease.
	scaledMountainousTerrain_sb0
		setSourceModuleIndex: 0 sourceModule: mountainousTerrain;
		setScale: 0.125;
		setBias: 0.125
]

{ #category : 'building - scaled - mountain' }
NoPlanetExample >> buildScaledMountainTerrainScale1 [
	"// 4: [Scaled-peak-modulation module]: This scale/bias module modifies the
  //    range of the output value from the peak-modulation module so that it
  //    can be used as the modulator for the peak-height-multiplier module.
  //    It is important that this output value is not much lower than 1.0."

	scaledMountainousTerrain_sb1 := NoScaleBias new autoRelease.
	scaledMountainousTerrain_sb1
		setSourceModuleIndex: 0 sourceModule: scaledMountainousTerrain_ex;
		setScale: 0.25;
		setBias: 1.0
]

{ #category : 'building - scaled - plains' }
NoPlanetExample >> buildScaledPlainsTerrain [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: scaled plains terrain (2 noise modules)
  //
  // This subgroup scales the output value from the plains-terrain group so
  // that it can be added to the elevations defined by the continent-
  // definition group.
  //
  // This subgroup scales the output value such that it is almost always
  // positive.  This is done so that negative elevations are not applied to
  // the continent-definition group, preventing parts of the continent-
  // definition group from having negative terrain features ""stamped"" into it.
  //
  // The output value from this module subgroup is measured in planetary
  // elevation units (-1.0 for the lowest underwater trenches and +1.0 for the
  // highest mountain peaks.)
  //"

	self buildScaledPlainsTerrainScale.
	self buildScaledPlainsTerrainDefinition
]

{ #category : 'building - scaled - plains' }
NoPlanetExample >> buildScaledPlainsTerrainDefinition [
	"// 2: [Scaled-plains-terrain group]: Caches the output value from the
  //    scaled-plains-terrain module.  This is the output value for the entire
  //    scaled-plains-terrain group."

	scaledPlainsTerrain := NoCache new autoRelease.
	scaledPlainsTerrain
		setSourceModuleIndex: 0 sourceModule: scaledPlainsTerrain_sb
]

{ #category : 'building - scaled - plains' }
NoPlanetExample >> buildScaledPlainsTerrainScale [
	"// 1: [Scaled-plains-terrain module]: This scale/bias module greatly
  //    flattens the output value from the plains terrain.  This output value
  //    is measured in planetary elevation units"
 
	scaledPlainsTerrain_sb := NoScaleBias new autoRelease.
	scaledPlainsTerrain_sb
		setSourceModuleIndex: 0 sourceModule: plainsTerrain;
		setScale: 0.00390625;
		setBias: 0.0078125
]

{ #category : 'building - terrain' }
NoPlanetExample >> buildTerrain [

	self buildTerrainType.
	self buildMountainTerrain.
	self buildHillyTerrain.
	self buildPlainsTerrain.
	self buildBadlandsTerrain
	
]

{ #category : 'building - terrain - type' }
NoPlanetExample >> buildTerrainType [
	"////////////////////////////////////////////////////////////////////////////
  // Module subgroup: terrain type definition (3 noise modules)
  //
  // This subgroup defines the positions of the terrain types on the planet.
  //
  // Terrain types include, in order of increasing roughness, plains, hills,
  // and mountains.
  //
  // This subgroup's output value is based on the output value from the
  // continent-definition group.  Rougher terrain mainly appears at higher
  // elevations.
  //
  // -1.0 represents the smoothest terrain types (plains and underwater) and
  // +1.0 represents the roughest terrain types (mountains).
  //"

	self buildTerrainTypeTurbulence.
	self buildTerrainTypeTerracing.
	self buildTerrainTypeDefinition
]

{ #category : 'building - terrain - type' }
NoPlanetExample >> buildTerrainTypeDefinition [
	"// 3: [Terrain-type-definition group]: Caches the output value from the
  //    roughness-probability-shift module.  This is the output value for
  //    the entire terrain-type-definition group."

	terrainTypeDef := NoCache new autoRelease.
	terrainTypeDef 
		setSourceModuleIndex: 0 sourceModule: terrainTypeDef_te
]

{ #category : 'building - terrain - type' }
NoPlanetExample >> buildTerrainTypeTerracing [
	"// 2: [Roughness-probability-shift module]: This terracing module sharpens
  //    the edges of the warped-continent module near sea level and lowers
  //    the slope towards the higher-elevation areas.  This shrinks the areas
  //    in which the rough terrain appears, increasing the ""rarity"" of rough
  //    terrain."

	terrainTypeDef_te := NoTerrace new autoRelease.
	terrainTypeDef_te
		setSourceModuleIndex: 0 sourceModule: terrainTypeDef_tu;
		addControlPoint: -1.00;
		addControlPoint: SHELF_LEVEL + SEA_LEVEL / 2.0;
		addControlPoint: 1.00
]

{ #category : 'building - terrain - type' }
NoPlanetExample >> buildTerrainTypeTurbulence [
	"// 1: [Warped-continent module]: This turbulence module slightly warps the
  //    output value from the continent-definition group.  This prevents the
  //    rougher terrain from appearing exclusively at higher elevations.
  //    Rough areas may now appear in the the ocean, creating rocky islands
  //    and fjords."

	terrainTypeDef_tu := NoTurbulence new autoRelease.
	terrainTypeDef_tu 
		setSourceModuleIndex: 0 sourceModule: continentDef;
		setSeed: CUR_SEED + 20;
		setFrequency: CONTINENT_FREQUENCY * 18.125;
		setPower: (CONTINENT_FREQUENCY / 20.59375) * TERRAIN_OFFSET;
		setRoughness: 3
]

{ #category : 'accessing' }
NoPlanetExample >> finalPlanet [

	^ finalPlanet
]

{ #category : 'generating' }
NoPlanetExample >> generate [
	
	^ (NoPlanetExampleGenerator on: self) generate
]
